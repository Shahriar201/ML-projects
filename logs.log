2024-11-04 21:35:06,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:35:06,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:35:06,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:35:06,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:38:01,548:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:38:01,563:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:38:01,563:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:38:01,564:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:55:05,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:55:05,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:55:05,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:55:05,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-04 21:55:22,713:INFO:PyCaret ClassificationExperiment
2024-11-04 21:55:22,714:INFO:Logging name: clf-default-name
2024-11-04 21:55:22,714:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-04 21:55:22,714:INFO:version 3.3.2
2024-11-04 21:55:22,714:INFO:Initializing setup()
2024-11-04 21:55:22,714:INFO:self.USI: 7144
2024-11-04 21:55:22,714:INFO:self._variable_keys: {'y_train', 'gpu_param', 'is_multiclass', 'data', 'fold_shuffle_param', 'X_test', 'log_plots_param', 'fold_generator', 'exp_name_log', 'seed', 'X', 'memory', '_ml_usecase', 'X_train', 'USI', 'fix_imbalance', 'fold_groups_param', 'html_param', 'target_param', 'n_jobs_param', 'y', 'idx', 'y_test', 'exp_id', 'gpu_n_jobs_param', 'pipeline', '_available_plots', 'logging_param'}
2024-11-04 21:55:22,714:INFO:Checking environment
2024-11-04 21:55:22,714:INFO:python_version: 3.10.11
2024-11-04 21:55:22,715:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2024-11-04 21:55:22,715:INFO:machine: AMD64
2024-11-04 21:55:22,715:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-04 21:55:22,718:INFO:Memory: svmem(total=12716195840, available=3181568000, percent=75.0, used=9534627840, free=3181568000)
2024-11-04 21:55:22,718:INFO:Physical Core: 2
2024-11-04 21:55:22,718:INFO:Logical Core: 4
2024-11-04 21:55:22,718:INFO:Checking libraries
2024-11-04 21:55:22,718:INFO:System:
2024-11-04 21:55:22,719:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2024-11-04 21:55:22,719:INFO:executable: c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\python.exe
2024-11-04 21:55:22,719:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-04 21:55:22,719:INFO:PyCaret required dependencies:
2024-11-04 21:55:22,833:INFO:                 pip: 23.0.1
2024-11-04 21:55:22,834:INFO:          setuptools: 65.5.0
2024-11-04 21:55:22,834:INFO:             pycaret: 3.3.2
2024-11-04 21:55:22,834:INFO:             IPython: 8.29.0
2024-11-04 21:55:22,834:INFO:          ipywidgets: 8.1.5
2024-11-04 21:55:22,834:INFO:                tqdm: 4.66.6
2024-11-04 21:55:22,834:INFO:               numpy: 1.26.4
2024-11-04 21:55:22,834:INFO:              pandas: 2.1.4
2024-11-04 21:55:22,834:INFO:              jinja2: 3.1.4
2024-11-04 21:55:22,835:INFO:               scipy: 1.11.4
2024-11-04 21:55:22,835:INFO:              joblib: 1.3.2
2024-11-04 21:55:22,835:INFO:             sklearn: 1.4.2
2024-11-04 21:55:22,835:INFO:                pyod: 2.0.2
2024-11-04 21:55:22,835:INFO:            imblearn: 0.12.4
2024-11-04 21:55:22,835:INFO:   category_encoders: 2.6.4
2024-11-04 21:55:22,836:INFO:            lightgbm: 4.5.0
2024-11-04 21:55:22,836:INFO:               numba: 0.60.0
2024-11-04 21:55:22,836:INFO:            requests: 2.32.3
2024-11-04 21:55:22,836:INFO:          matplotlib: 3.7.5
2024-11-04 21:55:22,836:INFO:          scikitplot: 0.3.7
2024-11-04 21:55:22,836:INFO:         yellowbrick: 1.5
2024-11-04 21:55:22,836:INFO:              plotly: 5.24.1
2024-11-04 21:55:22,836:INFO:    plotly-resampler: Not installed
2024-11-04 21:55:22,836:INFO:             kaleido: 0.2.1
2024-11-04 21:55:22,836:INFO:           schemdraw: 0.15
2024-11-04 21:55:22,836:INFO:         statsmodels: 0.14.4
2024-11-04 21:55:22,836:INFO:              sktime: 0.26.0
2024-11-04 21:55:22,837:INFO:               tbats: 1.1.3
2024-11-04 21:55:22,837:INFO:            pmdarima: 2.0.4
2024-11-04 21:55:22,837:INFO:              psutil: 6.1.0
2024-11-04 21:55:22,837:INFO:          markupsafe: 3.0.2
2024-11-04 21:55:22,837:INFO:             pickle5: Not installed
2024-11-04 21:55:22,837:INFO:         cloudpickle: 3.1.0
2024-11-04 21:55:22,837:INFO:         deprecation: 2.1.0
2024-11-04 21:55:22,837:INFO:              xxhash: 3.5.0
2024-11-04 21:55:22,837:INFO:           wurlitzer: Not installed
2024-11-04 21:55:22,837:INFO:PyCaret optional dependencies:
2024-11-04 21:55:22,863:INFO:                shap: Not installed
2024-11-04 21:55:22,863:INFO:           interpret: Not installed
2024-11-04 21:55:22,863:INFO:                umap: Not installed
2024-11-04 21:55:22,863:INFO:     ydata_profiling: 4.12.0
2024-11-04 21:55:22,863:INFO:  explainerdashboard: Not installed
2024-11-04 21:55:22,863:INFO:             autoviz: Not installed
2024-11-04 21:55:22,863:INFO:           fairlearn: Not installed
2024-11-04 21:55:22,863:INFO:          deepchecks: Not installed
2024-11-04 21:55:22,863:INFO:             xgboost: Not installed
2024-11-04 21:55:22,863:INFO:            catboost: Not installed
2024-11-04 21:55:22,863:INFO:              kmodes: Not installed
2024-11-04 21:55:22,863:INFO:             mlxtend: Not installed
2024-11-04 21:55:22,863:INFO:       statsforecast: Not installed
2024-11-04 21:55:22,864:INFO:        tune_sklearn: Not installed
2024-11-04 21:55:22,864:INFO:                 ray: Not installed
2024-11-04 21:55:22,864:INFO:            hyperopt: Not installed
2024-11-04 21:55:22,864:INFO:              optuna: Not installed
2024-11-04 21:55:22,864:INFO:               skopt: Not installed
2024-11-04 21:55:22,864:INFO:              mlflow: 2.17.2
2024-11-04 21:55:22,864:INFO:              gradio: Not installed
2024-11-04 21:55:22,864:INFO:             fastapi: Not installed
2024-11-04 21:55:22,864:INFO:             uvicorn: Not installed
2024-11-04 21:55:22,864:INFO:              m2cgen: Not installed
2024-11-04 21:55:22,864:INFO:           evidently: Not installed
2024-11-04 21:55:22,864:INFO:               fugue: Not installed
2024-11-04 21:55:22,864:INFO:           streamlit: Not installed
2024-11-04 21:55:22,864:INFO:             prophet: Not installed
2024-11-04 21:55:22,864:INFO:None
2024-11-04 21:55:22,864:INFO:Set up data.
2024-11-04 21:55:22,883:INFO:Set up folding strategy.
2024-11-04 21:55:22,883:INFO:Set up train/test split.
2024-11-04 21:55:22,889:INFO:Set up index.
2024-11-04 21:55:22,890:INFO:Assigning column types.
2024-11-04 21:55:22,900:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-04 21:55:22,981:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-04 21:55:23,018:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-04 21:55:23,107:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,108:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,243:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-04 21:55:23,250:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-04 21:55:23,306:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,307:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,310:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-04 21:55:23,387:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-04 21:55:23,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,492:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-04 21:55:23,525:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,525:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,525:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-04 21:55:23,628:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,628:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,708:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,708:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:23,728:INFO:Preparing preprocessing pipeline...
2024-11-04 21:55:23,728:INFO:Set up label encoding.
2024-11-04 21:55:23,728:INFO:Set up simple imputation.
2024-11-04 21:55:23,728:INFO:Set up encoding of ordinal features.
2024-11-04 21:55:23,728:INFO:Set up encoding of categorical features.
2024-11-04 21:55:23,728:INFO:Set up removing multicollinearity.
2024-11-04 21:55:23,728:INFO:Set up column transformation.
2024-11-04 21:55:23,728:INFO:Set up feature normalization.
2024-11-04 21:55:23,728:INFO:Set up column name cleaning.
2024-11-04 21:55:24,064:INFO:Finished creating preprocessing pipeline.
2024-11-04 21:55:24,092:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-04 21:55:24,092:INFO:Creating final display dataframe.
2024-11-04 21:55:24,525:INFO:Setup _display_container:                     Description              Value
0                    Session id               1402
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (317, 11)
5        Transformed data shape          (317, 18)
6   Transformed train set shape          (221, 18)
7    Transformed test set shape           (96, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment       MlflowLogger
27              Experiment Name   clf-default-name
28                          USI               7144
2024-11-04 21:55:24,670:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:24,670:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:24,772:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:24,772:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-04 21:55:24,772:INFO:Logging experiment in loggers
2024-11-04 21:55:25,144:INFO:SubProcess save_model() called ==================================
2024-11-04 21:55:25,245:INFO:Initializing save_model()
2024-11-04 21:55:25,245:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\SHAHRIAR\AppData\Local\Temp\tmpft4rgo96\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-04 21:55:25,245:INFO:Adding model into prep_pipe
2024-11-04 21:55:25,245:WARNING:Only Model saved as it was a pipeline.
2024-11-04 21:55:25,245:INFO:C:\Users\SHAHRIAR\AppData\Local\Temp\tmpft4rgo96\Transformation Pipeline.pkl saved in current working directory
2024-11-04 21:55:25,292:INFO:Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-04 21:55:25,292:INFO:save_model() successfully completed......................................
2024-11-04 21:55:25,540:INFO:SubProcess save_model() end ==================================
2024-11-04 21:55:25,679:INFO:setup() successfully completed in 2.06s...............
2024-11-04 23:57:00,953:INFO:Initializing create_model()
2024-11-04 23:57:00,954:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-04 23:57:00,955:INFO:Checking exceptions
2024-11-04 23:57:01,055:INFO:Importing libraries
2024-11-04 23:57:01,056:INFO:Copying training dataset
2024-11-04 23:57:01,101:INFO:Defining folds
2024-11-04 23:57:01,104:INFO:Declaring metric variables
2024-11-04 23:57:01,125:INFO:Importing untrained model
2024-11-04 23:57:01,139:INFO:Random Forest Classifier Imported successfully
2024-11-04 23:57:01,160:INFO:Starting cross validation
2024-11-04 23:57:01,173:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-04 23:57:08,581:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,588:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,595:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,597:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,606:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,611:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-04 23:57:08,615:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,625:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,633:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:08,643:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,159:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,165:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,165:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-04 23:57:09,176:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,468:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,471:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,477:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-04 23:57:09,494:INFO:Calculating mean and std
2024-11-04 23:57:09,496:INFO:Creating metrics dataframe
2024-11-04 23:57:09,508:INFO:Finalizing model
2024-11-04 23:57:09,962:INFO:Creating Dashboard logs
2024-11-04 23:57:09,968:INFO:Model: Random Forest Classifier
2024-11-04 23:57:10,077:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1402, 'verbose': 0, 'warm_start': False}
2024-11-04 23:57:10,300:INFO:Initializing predict_model()
2024-11-04 23:57:10,300:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023B863DEDD0>)
2024-11-04 23:57:10,301:INFO:Checking exceptions
2024-11-04 23:57:10,301:INFO:Preloading libraries
2024-11-04 23:57:13,549:INFO:Uploading results into container
2024-11-04 23:57:13,551:INFO:Uploading model into container now
2024-11-04 23:57:13,579:INFO:_master_model_container: 1
2024-11-04 23:57:13,579:INFO:_display_container: 2
2024-11-04 23:57:13,581:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False)
2024-11-04 23:57:13,582:INFO:create_model() successfully completed......................................
2024-11-05 00:00:50,910:INFO:Initializing get_config()
2024-11-05 00:00:50,910:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, variable=None)
2024-11-05 00:01:26,573:INFO:Initializing get_config()
2024-11-05 00:01:26,573:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, variable=X_test)
2024-11-05 00:01:26,574:INFO:Variable: 'X_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_test_transformed' instead.
2024-11-05 00:01:26,589:INFO:Variable:  returned as       Age  Gender  Protein1  Protein2  Protein3  Protein4 Tumour_Stage  \
87   85.0  FEMALE  0.538090   0.28109  -0.10642   0.23963            I   
11   72.0  FEMALE -0.372700   0.55549  -0.66790  -0.35070           II   
261  65.0  FEMALE -0.443240   0.60955  -0.39889   0.33211           II   
2    69.0  FEMALE  0.213980   1.31140  -0.32747  -0.23426          III   
292  62.0  FEMALE  0.066312   1.29540   0.25121  -0.31091            I   
..    ...     ...       ...       ...       ...       ...          ...   
225  47.0  FEMALE  0.294880   1.40370   0.24430  -0.39588          III   
322  52.0  FEMALE  0.240800   1.73480   0.33109   1.04410            I   
90   48.0  FEMALE -0.215800  -0.29338   0.86771  -0.24204          III   
154  63.0  FEMALE  0.903140   1.96780  -0.79079   0.96265           II   
281  39.0  FEMALE -0.147910   1.27130   0.20931  -0.47290          III   

                          Histology HER2 status                 Surgery_type  
87               Mucinous Carcinoma    Negative                   Lumpectomy  
11    Infiltrating Ductal Carcinoma    Negative                        Other  
261   Infiltrating Ductal Carcinoma    Negative                        Other  
2     Infiltrating Ductal Carcinoma    Negative                        Other  
292              Mucinous Carcinoma    Negative                   Lumpectomy  
..                              ...         ...                          ...  
225  Infiltrating Lobular Carcinoma    Positive                   Lumpectomy  
322   Infiltrating Ductal Carcinoma    Negative                        Other  
90    Infiltrating Ductal Carcinoma    Negative            Simple Mastectomy  
154  Infiltrating Lobular Carcinoma    Negative            Simple Mastectomy  
281  Infiltrating Lobular Carcinoma    Negative  Modified Radical Mastectomy  

[96 rows x 10 columns]
2024-11-05 00:01:26,590:INFO:get_config() successfully completed......................................
2024-11-05 00:01:50,829:INFO:Initializing get_config()
2024-11-05 00:01:50,829:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, variable=X_test_transformed)
2024-11-05 00:01:50,901:INFO:Variable: X_test returned as           Age    Gender  Protein1  Protein2  Protein3  Protein4  \
87   1.854169 -0.135769  0.984131 -0.755626  0.050238  0.284067   
11   0.999754 -0.135769 -0.758669 -0.455910 -1.025618 -0.653339   
261  0.506680 -0.135769 -0.878039 -0.395448 -0.485256  0.445046   
2    0.791585 -0.135769  0.318143  0.425560 -0.349266 -0.480156   
292  0.287064 -0.135769  0.030954  0.406170  0.624201 -0.594700   
..        ...       ...       ...       ...       ...       ...   
225 -0.902962 -0.135769  0.479984  0.537973  0.613879 -0.719277   
322 -0.487221 -0.135769  0.371456  0.948662  0.741683  1.791410   
90  -0.818076 -0.135769 -0.486439 -1.337710  1.459531 -0.491881   
154  0.360861 -0.135769  1.785313  1.244197 -1.286485  1.628734   
281 -1.618049 -0.135769 -0.365476  0.377018  0.561206 -0.830180   

     Tumour_Stage_II  Tumour_Stage_I  Tumour_Stage_III  \
87         -1.241060        2.194491         -0.533745   
11          0.805763       -0.455687         -0.533745   
261         0.805763       -0.455687         -0.533745   
2          -1.241060       -0.455687          1.873554   
292        -1.241060        2.194491         -0.533745   
..               ...             ...               ...   
225        -1.241060       -0.455687          1.873554   
322        -1.241060        2.194491         -0.533745   
90         -1.241060       -0.455687          1.873554   
154         0.805763       -0.455687         -0.533745   
281        -1.241060       -0.455687          1.873554   

     Histology_Infiltrating Ductal Carcinoma  \
87                                 -1.549193   
11                                  0.645497   
261                                 0.645497   
2                                   0.645497   
292                                -1.549193   
..                                       ...   
225                                -1.549193   
322                                 0.645497   
90                                  0.645497   
154                                -1.549193   
281                                -1.549193   

     Histology_Infiltrating Lobular Carcinoma  Histology_Mucinous Carcinoma  \
87                                  -0.596513                      5.529144   
11                                  -0.596513                     -0.180860   
261                                 -0.596513                     -0.180860   
2                                   -0.596513                     -0.180860   
292                                 -0.596513                      5.529144   
..                                        ...                           ...   
225                                  1.676408                     -0.180860   
322                                 -0.596513                     -0.180860   
90                                  -0.596513                     -0.180860   
154                                  1.676408                     -0.180860   
281                                  1.676408                     -0.180860   

     HER2 status  Surgery_type_Lumpectomy  Surgery_type_Simple Mastectomy  \
87     -0.324037                 1.977653                       -0.470100   
11     -0.324037                -0.505650                       -0.470100   
261    -0.324037                -0.505650                       -0.470100   
2      -0.324037                -0.505650                       -0.470100   
292    -0.324037                 1.977653                       -0.470100   
..           ...                      ...                             ...   
225     3.086067                 1.977653                       -0.470100   
322    -0.324037                -0.505650                       -0.470100   
90     -0.324037                -0.505650                        2.127205   
154    -0.324037                -0.505650                        2.127205   
281    -0.324037                -0.505650                       -0.470100   

     Surgery_type_Other  Surgery_type_Modified Radical Mastectomy  
87            -0.666667                                 -0.666667  
11             1.500000                                 -0.666667  
261            1.500000                                 -0.666667  
2              1.500000                                 -0.666667  
292           -0.666667                                 -0.666667  
..                  ...                                       ...  
225           -0.666667                                 -0.666667  
322            1.500000                                 -0.666667  
90            -0.666667                                 -0.666667  
154           -0.666667                                 -0.666667  
281           -0.666667                                  1.500000  

[96 rows x 17 columns]
2024-11-05 00:01:50,901:INFO:get_config() successfully completed......................................
2024-11-05 00:02:37,767:INFO:Initializing get_config()
2024-11-05 00:02:37,767:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, variable=target_param)
2024-11-05 00:02:37,768:INFO:Variable:  returned as Patient_Status
2024-11-05 00:02:37,769:INFO:get_config() successfully completed......................................
2024-11-05 00:03:32,314:INFO:Initializing compare_models()
2024-11-05 00:03:32,314:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-05 00:03:32,315:INFO:Checking exceptions
2024-11-05 00:03:32,322:INFO:Preparing display monitor
2024-11-05 00:03:32,395:INFO:Initializing Logistic Regression
2024-11-05 00:03:32,395:INFO:Total runtime is 0.0 minutes
2024-11-05 00:03:32,415:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:32,416:INFO:Initializing create_model()
2024-11-05 00:03:32,416:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:32,416:INFO:Checking exceptions
2024-11-05 00:03:32,416:INFO:Importing libraries
2024-11-05 00:03:32,416:INFO:Copying training dataset
2024-11-05 00:03:32,430:INFO:Defining folds
2024-11-05 00:03:32,430:INFO:Declaring metric variables
2024-11-05 00:03:32,447:INFO:Importing untrained model
2024-11-05 00:03:32,464:INFO:Logistic Regression Imported successfully
2024-11-05 00:03:32,489:INFO:Starting cross validation
2024-11-05 00:03:32,497:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:42,021:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,027:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,037:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,130:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,137:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,152:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,180:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,190:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,197:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,494:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,502:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,510:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,592:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,599:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,609:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:42,626:INFO:Calculating mean and std
2024-11-05 00:03:42,627:INFO:Creating metrics dataframe
2024-11-05 00:03:42,629:INFO:Uploading results into container
2024-11-05 00:03:42,630:INFO:Uploading model into container now
2024-11-05 00:03:42,631:INFO:_master_model_container: 2
2024-11-05 00:03:42,631:INFO:_display_container: 3
2024-11-05 00:03:42,635:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1402, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-05 00:03:42,635:INFO:create_model() successfully completed......................................
2024-11-05 00:03:42,788:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:42,788:INFO:Creating metrics dataframe
2024-11-05 00:03:42,796:INFO:Initializing K Neighbors Classifier
2024-11-05 00:03:42,796:INFO:Total runtime is 0.17334140141805013 minutes
2024-11-05 00:03:42,807:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:42,807:INFO:Initializing create_model()
2024-11-05 00:03:42,807:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:42,808:INFO:Checking exceptions
2024-11-05 00:03:42,808:INFO:Importing libraries
2024-11-05 00:03:42,808:INFO:Copying training dataset
2024-11-05 00:03:42,821:INFO:Defining folds
2024-11-05 00:03:42,822:INFO:Declaring metric variables
2024-11-05 00:03:42,832:INFO:Importing untrained model
2024-11-05 00:03:42,847:INFO:K Neighbors Classifier Imported successfully
2024-11-05 00:03:42,862:INFO:Starting cross validation
2024-11-05 00:03:42,879:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:43,587:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,588:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,592:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,594:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,600:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,605:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,610:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,618:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,624:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,663:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,674:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,679:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,918:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,928:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,942:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:43,969:INFO:Calculating mean and std
2024-11-05 00:03:43,972:INFO:Creating metrics dataframe
2024-11-05 00:03:43,976:INFO:Uploading results into container
2024-11-05 00:03:43,977:INFO:Uploading model into container now
2024-11-05 00:03:43,977:INFO:_master_model_container: 3
2024-11-05 00:03:43,977:INFO:_display_container: 3
2024-11-05 00:03:43,978:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-05 00:03:43,978:INFO:create_model() successfully completed......................................
2024-11-05 00:03:44,345:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:44,345:INFO:Creating metrics dataframe
2024-11-05 00:03:44,356:INFO:Initializing Naive Bayes
2024-11-05 00:03:44,356:INFO:Total runtime is 0.199342679977417 minutes
2024-11-05 00:03:44,361:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:44,361:INFO:Initializing create_model()
2024-11-05 00:03:44,361:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:44,361:INFO:Checking exceptions
2024-11-05 00:03:44,362:INFO:Importing libraries
2024-11-05 00:03:44,362:INFO:Copying training dataset
2024-11-05 00:03:44,370:INFO:Defining folds
2024-11-05 00:03:44,370:INFO:Declaring metric variables
2024-11-05 00:03:44,379:INFO:Importing untrained model
2024-11-05 00:03:44,392:INFO:Naive Bayes Imported successfully
2024-11-05 00:03:44,421:INFO:Starting cross validation
2024-11-05 00:03:44,426:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:45,142:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,151:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,153:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,157:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,158:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,162:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,165:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,166:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,169:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,172:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,174:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:45,178:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,391:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,393:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,396:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:45,418:INFO:Calculating mean and std
2024-11-05 00:03:45,422:INFO:Creating metrics dataframe
2024-11-05 00:03:45,426:INFO:Uploading results into container
2024-11-05 00:03:45,427:INFO:Uploading model into container now
2024-11-05 00:03:45,428:INFO:_master_model_container: 4
2024-11-05 00:03:45,428:INFO:_display_container: 3
2024-11-05 00:03:45,429:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-05 00:03:45,429:INFO:create_model() successfully completed......................................
2024-11-05 00:03:45,666:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:45,667:INFO:Creating metrics dataframe
2024-11-05 00:03:45,700:INFO:Initializing Decision Tree Classifier
2024-11-05 00:03:45,701:INFO:Total runtime is 0.22176351149876913 minutes
2024-11-05 00:03:45,706:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:45,706:INFO:Initializing create_model()
2024-11-05 00:03:45,707:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:45,707:INFO:Checking exceptions
2024-11-05 00:03:45,707:INFO:Importing libraries
2024-11-05 00:03:45,707:INFO:Copying training dataset
2024-11-05 00:03:45,713:INFO:Defining folds
2024-11-05 00:03:45,713:INFO:Declaring metric variables
2024-11-05 00:03:45,721:INFO:Importing untrained model
2024-11-05 00:03:45,728:INFO:Decision Tree Classifier Imported successfully
2024-11-05 00:03:45,746:INFO:Starting cross validation
2024-11-05 00:03:45,753:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:46,161:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,162:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,165:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,170:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,172:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,172:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,175:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,177:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,177:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,177:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,183:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,189:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,384:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,387:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,389:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:46,407:INFO:Calculating mean and std
2024-11-05 00:03:46,408:INFO:Creating metrics dataframe
2024-11-05 00:03:46,410:INFO:Uploading results into container
2024-11-05 00:03:46,410:INFO:Uploading model into container now
2024-11-05 00:03:46,411:INFO:_master_model_container: 5
2024-11-05 00:03:46,411:INFO:_display_container: 3
2024-11-05 00:03:46,411:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1402, splitter='best')
2024-11-05 00:03:46,411:INFO:create_model() successfully completed......................................
2024-11-05 00:03:46,536:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:46,536:INFO:Creating metrics dataframe
2024-11-05 00:03:46,546:INFO:Initializing SVM - Linear Kernel
2024-11-05 00:03:46,546:INFO:Total runtime is 0.23583990732828777 minutes
2024-11-05 00:03:46,555:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:46,556:INFO:Initializing create_model()
2024-11-05 00:03:46,556:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:46,556:INFO:Checking exceptions
2024-11-05 00:03:46,556:INFO:Importing libraries
2024-11-05 00:03:46,556:INFO:Copying training dataset
2024-11-05 00:03:46,561:INFO:Defining folds
2024-11-05 00:03:46,561:INFO:Declaring metric variables
2024-11-05 00:03:46,572:INFO:Importing untrained model
2024-11-05 00:03:46,578:INFO:SVM - Linear Kernel Imported successfully
2024-11-05 00:03:46,596:INFO:Starting cross validation
2024-11-05 00:03:46,602:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:47,058:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,065:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,069:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,071:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,075:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,083:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,092:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,101:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,107:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,108:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,115:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,121:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,279:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,284:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,287:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,302:INFO:Calculating mean and std
2024-11-05 00:03:47,305:INFO:Creating metrics dataframe
2024-11-05 00:03:47,309:INFO:Uploading results into container
2024-11-05 00:03:47,310:INFO:Uploading model into container now
2024-11-05 00:03:47,311:INFO:_master_model_container: 6
2024-11-05 00:03:47,311:INFO:_display_container: 3
2024-11-05 00:03:47,312:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=1402, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-05 00:03:47,312:INFO:create_model() successfully completed......................................
2024-11-05 00:03:47,436:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:47,436:INFO:Creating metrics dataframe
2024-11-05 00:03:47,450:INFO:Initializing Ridge Classifier
2024-11-05 00:03:47,451:INFO:Total runtime is 0.2509235620498657 minutes
2024-11-05 00:03:47,457:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:47,457:INFO:Initializing create_model()
2024-11-05 00:03:47,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:47,457:INFO:Checking exceptions
2024-11-05 00:03:47,457:INFO:Importing libraries
2024-11-05 00:03:47,457:INFO:Copying training dataset
2024-11-05 00:03:47,472:INFO:Defining folds
2024-11-05 00:03:47,472:INFO:Declaring metric variables
2024-11-05 00:03:47,483:INFO:Importing untrained model
2024-11-05 00:03:47,494:INFO:Ridge Classifier Imported successfully
2024-11-05 00:03:47,515:INFO:Starting cross validation
2024-11-05 00:03:47,524:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:47,891:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,892:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,901:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,901:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,902:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,904:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:47,906:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,907:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,907:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,915:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,923:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,928:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:47,931:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:47,934:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:48,104:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:48,107:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:48,111:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:48,132:INFO:Calculating mean and std
2024-11-05 00:03:48,133:INFO:Creating metrics dataframe
2024-11-05 00:03:48,139:INFO:Uploading results into container
2024-11-05 00:03:48,140:INFO:Uploading model into container now
2024-11-05 00:03:48,140:INFO:_master_model_container: 7
2024-11-05 00:03:48,140:INFO:_display_container: 3
2024-11-05 00:03:48,141:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1402, solver='auto',
                tol=0.0001)
2024-11-05 00:03:48,141:INFO:create_model() successfully completed......................................
2024-11-05 00:03:48,261:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:48,261:INFO:Creating metrics dataframe
2024-11-05 00:03:48,273:INFO:Initializing Random Forest Classifier
2024-11-05 00:03:48,273:INFO:Total runtime is 0.26462568442026774 minutes
2024-11-05 00:03:48,277:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:48,278:INFO:Initializing create_model()
2024-11-05 00:03:48,278:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:48,278:INFO:Checking exceptions
2024-11-05 00:03:48,278:INFO:Importing libraries
2024-11-05 00:03:48,279:INFO:Copying training dataset
2024-11-05 00:03:48,286:INFO:Defining folds
2024-11-05 00:03:48,287:INFO:Declaring metric variables
2024-11-05 00:03:48,294:INFO:Importing untrained model
2024-11-05 00:03:48,306:INFO:Random Forest Classifier Imported successfully
2024-11-05 00:03:48,322:INFO:Starting cross validation
2024-11-05 00:03:48,326:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:49,135:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,133:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,142:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,145:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,149:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,149:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,152:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,156:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,159:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:49,164:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,271:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,277:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,281:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:49,283:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,895:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,904:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,909:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:49,924:INFO:Calculating mean and std
2024-11-05 00:03:49,927:INFO:Creating metrics dataframe
2024-11-05 00:03:49,934:INFO:Uploading results into container
2024-11-05 00:03:49,935:INFO:Uploading model into container now
2024-11-05 00:03:49,935:INFO:_master_model_container: 8
2024-11-05 00:03:49,935:INFO:_display_container: 3
2024-11-05 00:03:49,936:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False)
2024-11-05 00:03:49,936:INFO:create_model() successfully completed......................................
2024-11-05 00:03:50,054:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:50,054:INFO:Creating metrics dataframe
2024-11-05 00:03:50,068:INFO:Initializing Quadratic Discriminant Analysis
2024-11-05 00:03:50,068:INFO:Total runtime is 0.29454102118810016 minutes
2024-11-05 00:03:50,074:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:50,074:INFO:Initializing create_model()
2024-11-05 00:03:50,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:50,075:INFO:Checking exceptions
2024-11-05 00:03:50,075:INFO:Importing libraries
2024-11-05 00:03:50,075:INFO:Copying training dataset
2024-11-05 00:03:50,087:INFO:Defining folds
2024-11-05 00:03:50,087:INFO:Declaring metric variables
2024-11-05 00:03:50,092:INFO:Importing untrained model
2024-11-05 00:03:50,101:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-05 00:03:50,120:INFO:Starting cross validation
2024-11-05 00:03:50,125:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:50,406:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 00:03:50,412:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 00:03:50,412:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 00:03:50,428:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 00:03:50,506:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,508:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,511:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,511:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,515:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,518:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,518:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,521:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,523:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,534:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,539:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,544:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,659:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 00:03:50,725:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,728:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,733:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:50,750:INFO:Calculating mean and std
2024-11-05 00:03:50,753:INFO:Creating metrics dataframe
2024-11-05 00:03:50,758:INFO:Uploading results into container
2024-11-05 00:03:50,759:INFO:Uploading model into container now
2024-11-05 00:03:50,760:INFO:_master_model_container: 9
2024-11-05 00:03:50,760:INFO:_display_container: 3
2024-11-05 00:03:50,761:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-05 00:03:50,766:INFO:create_model() successfully completed......................................
2024-11-05 00:03:50,904:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:50,905:INFO:Creating metrics dataframe
2024-11-05 00:03:50,917:INFO:Initializing Ada Boost Classifier
2024-11-05 00:03:50,917:INFO:Total runtime is 0.30869751373926796 minutes
2024-11-05 00:03:50,921:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:50,922:INFO:Initializing create_model()
2024-11-05 00:03:50,922:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:50,922:INFO:Checking exceptions
2024-11-05 00:03:50,923:INFO:Importing libraries
2024-11-05 00:03:50,923:INFO:Copying training dataset
2024-11-05 00:03:50,930:INFO:Defining folds
2024-11-05 00:03:50,931:INFO:Declaring metric variables
2024-11-05 00:03:50,939:INFO:Importing untrained model
2024-11-05 00:03:50,945:INFO:Ada Boost Classifier Imported successfully
2024-11-05 00:03:51,007:INFO:Starting cross validation
2024-11-05 00:03:51,017:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:51,352:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 00:03:51,360:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 00:03:51,363:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 00:03:51,387:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 00:03:51,713:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,716:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,719:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,720:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,722:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,725:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,726:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,727:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,734:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,736:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,741:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,749:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:51,889:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 00:03:52,088:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:52,091:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:52,095:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:52,118:INFO:Calculating mean and std
2024-11-05 00:03:52,120:INFO:Creating metrics dataframe
2024-11-05 00:03:52,123:INFO:Uploading results into container
2024-11-05 00:03:52,124:INFO:Uploading model into container now
2024-11-05 00:03:52,125:INFO:_master_model_container: 10
2024-11-05 00:03:52,132:INFO:_display_container: 3
2024-11-05 00:03:52,133:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=1402)
2024-11-05 00:03:52,133:INFO:create_model() successfully completed......................................
2024-11-05 00:03:52,348:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:52,348:INFO:Creating metrics dataframe
2024-11-05 00:03:52,360:INFO:Initializing Gradient Boosting Classifier
2024-11-05 00:03:52,360:INFO:Total runtime is 0.3327402631441752 minutes
2024-11-05 00:03:52,372:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:52,372:INFO:Initializing create_model()
2024-11-05 00:03:52,372:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:52,372:INFO:Checking exceptions
2024-11-05 00:03:52,373:INFO:Importing libraries
2024-11-05 00:03:52,373:INFO:Copying training dataset
2024-11-05 00:03:52,384:INFO:Defining folds
2024-11-05 00:03:52,385:INFO:Declaring metric variables
2024-11-05 00:03:52,403:INFO:Importing untrained model
2024-11-05 00:03:52,409:INFO:Gradient Boosting Classifier Imported successfully
2024-11-05 00:03:52,425:INFO:Starting cross validation
2024-11-05 00:03:52,432:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:53,182:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,187:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,188:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,193:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,193:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,201:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,202:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,209:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,218:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,219:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,226:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,238:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,877:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,882:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,886:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:53,892:INFO:Calculating mean and std
2024-11-05 00:03:53,894:INFO:Creating metrics dataframe
2024-11-05 00:03:53,904:INFO:Uploading results into container
2024-11-05 00:03:53,904:INFO:Uploading model into container now
2024-11-05 00:03:53,905:INFO:_master_model_container: 11
2024-11-05 00:03:53,905:INFO:_display_container: 3
2024-11-05 00:03:53,907:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=1402, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-05 00:03:53,907:INFO:create_model() successfully completed......................................
2024-11-05 00:03:54,039:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:54,040:INFO:Creating metrics dataframe
2024-11-05 00:03:54,056:INFO:Initializing Linear Discriminant Analysis
2024-11-05 00:03:54,056:INFO:Total runtime is 0.36100460290908815 minutes
2024-11-05 00:03:54,061:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:54,061:INFO:Initializing create_model()
2024-11-05 00:03:54,061:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:54,064:INFO:Checking exceptions
2024-11-05 00:03:54,064:INFO:Importing libraries
2024-11-05 00:03:54,064:INFO:Copying training dataset
2024-11-05 00:03:54,069:INFO:Defining folds
2024-11-05 00:03:54,070:INFO:Declaring metric variables
2024-11-05 00:03:54,081:INFO:Importing untrained model
2024-11-05 00:03:54,088:INFO:Linear Discriminant Analysis Imported successfully
2024-11-05 00:03:54,111:INFO:Starting cross validation
2024-11-05 00:03:54,117:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:54,574:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,576:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,587:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,587:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,592:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,593:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,593:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,600:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,605:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,613:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,884:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,887:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,890:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:54,902:INFO:Calculating mean and std
2024-11-05 00:03:54,903:INFO:Creating metrics dataframe
2024-11-05 00:03:54,905:INFO:Uploading results into container
2024-11-05 00:03:54,906:INFO:Uploading model into container now
2024-11-05 00:03:54,906:INFO:_master_model_container: 12
2024-11-05 00:03:54,906:INFO:_display_container: 3
2024-11-05 00:03:54,906:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-05 00:03:54,906:INFO:create_model() successfully completed......................................
2024-11-05 00:03:55,035:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:55,036:INFO:Creating metrics dataframe
2024-11-05 00:03:55,051:INFO:Initializing Extra Trees Classifier
2024-11-05 00:03:55,052:INFO:Total runtime is 0.37761170069376626 minutes
2024-11-05 00:03:55,059:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:55,059:INFO:Initializing create_model()
2024-11-05 00:03:55,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:55,059:INFO:Checking exceptions
2024-11-05 00:03:55,059:INFO:Importing libraries
2024-11-05 00:03:55,059:INFO:Copying training dataset
2024-11-05 00:03:55,070:INFO:Defining folds
2024-11-05 00:03:55,070:INFO:Declaring metric variables
2024-11-05 00:03:55,077:INFO:Importing untrained model
2024-11-05 00:03:55,088:INFO:Extra Trees Classifier Imported successfully
2024-11-05 00:03:55,115:INFO:Starting cross validation
2024-11-05 00:03:55,121:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:55,939:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:55,948:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:55,951:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:55,955:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:55,963:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:55,969:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:55,969:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,021:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,136:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,159:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,299:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,307:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,317:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,863:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,866:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,869:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:56,890:INFO:Calculating mean and std
2024-11-05 00:03:56,900:INFO:Creating metrics dataframe
2024-11-05 00:03:56,921:INFO:Uploading results into container
2024-11-05 00:03:56,924:INFO:Uploading model into container now
2024-11-05 00:03:56,925:INFO:_master_model_container: 13
2024-11-05 00:03:56,925:INFO:_display_container: 3
2024-11-05 00:03:56,926:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1402, verbose=0,
                     warm_start=False)
2024-11-05 00:03:56,927:INFO:create_model() successfully completed......................................
2024-11-05 00:03:57,103:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:57,103:INFO:Creating metrics dataframe
2024-11-05 00:03:57,122:INFO:Initializing Light Gradient Boosting Machine
2024-11-05 00:03:57,122:INFO:Total runtime is 0.41211078564325965 minutes
2024-11-05 00:03:57,132:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:57,133:INFO:Initializing create_model()
2024-11-05 00:03:57,134:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:57,134:INFO:Checking exceptions
2024-11-05 00:03:57,134:INFO:Importing libraries
2024-11-05 00:03:57,135:INFO:Copying training dataset
2024-11-05 00:03:57,143:INFO:Defining folds
2024-11-05 00:03:57,143:INFO:Declaring metric variables
2024-11-05 00:03:57,154:INFO:Importing untrained model
2024-11-05 00:03:57,172:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-05 00:03:57,190:INFO:Starting cross validation
2024-11-05 00:03:57,201:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:57,817:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,819:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,821:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,822:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,825:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,828:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,831:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,832:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,835:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,899:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,904:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:57,909:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,201:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,208:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,217:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,242:INFO:Calculating mean and std
2024-11-05 00:03:58,248:INFO:Creating metrics dataframe
2024-11-05 00:03:58,252:INFO:Uploading results into container
2024-11-05 00:03:58,253:INFO:Uploading model into container now
2024-11-05 00:03:58,253:INFO:_master_model_container: 14
2024-11-05 00:03:58,254:INFO:_display_container: 3
2024-11-05 00:03:58,255:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1402, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-05 00:03:58,255:INFO:create_model() successfully completed......................................
2024-11-05 00:03:58,504:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:58,504:INFO:Creating metrics dataframe
2024-11-05 00:03:58,519:INFO:Initializing Dummy Classifier
2024-11-05 00:03:58,519:INFO:Total runtime is 0.43540026744206745 minutes
2024-11-05 00:03:58,524:INFO:SubProcess create_model() called ==================================
2024-11-05 00:03:58,525:INFO:Initializing create_model()
2024-11-05 00:03:58,525:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023B8639E830>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:58,525:INFO:Checking exceptions
2024-11-05 00:03:58,525:INFO:Importing libraries
2024-11-05 00:03:58,525:INFO:Copying training dataset
2024-11-05 00:03:58,533:INFO:Defining folds
2024-11-05 00:03:58,533:INFO:Declaring metric variables
2024-11-05 00:03:58,545:INFO:Importing untrained model
2024-11-05 00:03:58,553:INFO:Dummy Classifier Imported successfully
2024-11-05 00:03:58,571:INFO:Starting cross validation
2024-11-05 00:03:58,578:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:03:58,963:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,969:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,971:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:58,973:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,975:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,981:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,984:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:58,987:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:58,996:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:59,001:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:59,003:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:59,006:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:59,170:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:59,174:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:59,175:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:03:59,179:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:03:59,192:INFO:Calculating mean and std
2024-11-05 00:03:59,195:INFO:Creating metrics dataframe
2024-11-05 00:03:59,197:INFO:Uploading results into container
2024-11-05 00:03:59,198:INFO:Uploading model into container now
2024-11-05 00:03:59,198:INFO:_master_model_container: 15
2024-11-05 00:03:59,198:INFO:_display_container: 3
2024-11-05 00:03:59,199:INFO:DummyClassifier(constant=None, random_state=1402, strategy='prior')
2024-11-05 00:03:59,199:INFO:create_model() successfully completed......................................
2024-11-05 00:03:59,325:INFO:SubProcess create_model() end ==================================
2024-11-05 00:03:59,326:INFO:Creating metrics dataframe
2024-11-05 00:03:59,362:INFO:Initializing create_model()
2024-11-05 00:03:59,363:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:03:59,363:INFO:Checking exceptions
2024-11-05 00:03:59,368:INFO:Importing libraries
2024-11-05 00:03:59,368:INFO:Copying training dataset
2024-11-05 00:03:59,373:INFO:Defining folds
2024-11-05 00:03:59,374:INFO:Declaring metric variables
2024-11-05 00:03:59,374:INFO:Importing untrained model
2024-11-05 00:03:59,374:INFO:Declaring custom model
2024-11-05 00:03:59,374:INFO:Dummy Classifier Imported successfully
2024-11-05 00:03:59,379:INFO:Cross validation set to False
2024-11-05 00:03:59,379:INFO:Fitting Model
2024-11-05 00:03:59,521:INFO:DummyClassifier(constant=None, random_state=1402, strategy='prior')
2024-11-05 00:03:59,521:INFO:create_model() successfully completed......................................
2024-11-05 00:03:59,658:INFO:Creating Dashboard logs
2024-11-05 00:03:59,667:INFO:Model: Dummy Classifier
2024-11-05 00:03:59,816:INFO:Logged params: {'constant': None, 'random_state': 1402, 'strategy': 'prior'}
2024-11-05 00:04:00,013:INFO:Initializing predict_model()
2024-11-05 00:04:00,013:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023B8348B250>)
2024-11-05 00:04:00,014:INFO:Checking exceptions
2024-11-05 00:04:00,014:INFO:Preloading libraries
2024-11-05 00:04:00,465:INFO:Creating Dashboard logs
2024-11-05 00:04:00,471:INFO:Model: Logistic Regression
2024-11-05 00:04:00,537:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 1402, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2024-11-05 00:04:01,008:INFO:Creating Dashboard logs
2024-11-05 00:04:01,017:INFO:Model: Random Forest Classifier
2024-11-05 00:04:01,083:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1402, 'verbose': 0, 'warm_start': False}
2024-11-05 00:04:01,563:INFO:Creating Dashboard logs
2024-11-05 00:04:01,569:INFO:Model: Extra Trees Classifier
2024-11-05 00:04:01,642:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 1402, 'verbose': 0, 'warm_start': False}
2024-11-05 00:04:02,132:INFO:Creating Dashboard logs
2024-11-05 00:04:02,136:INFO:Model: Ridge Classifier
2024-11-05 00:04:02,201:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 1402, 'solver': 'auto', 'tol': 0.0001}
2024-11-05 00:04:02,618:INFO:Creating Dashboard logs
2024-11-05 00:04:02,622:INFO:Model: Linear Discriminant Analysis
2024-11-05 00:04:02,685:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2024-11-05 00:04:03,117:INFO:Creating Dashboard logs
2024-11-05 00:04:03,122:INFO:Model: Gradient Boosting Classifier
2024-11-05 00:04:03,188:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 1402, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2024-11-05 00:04:03,653:INFO:Creating Dashboard logs
2024-11-05 00:04:03,657:INFO:Model: Light Gradient Boosting Machine
2024-11-05 00:04:03,731:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 1402, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2024-11-05 00:04:04,170:INFO:Creating Dashboard logs
2024-11-05 00:04:04,173:INFO:Model: Ada Boost Classifier
2024-11-05 00:04:04,237:INFO:Logged params: {'algorithm': 'SAMME.R', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 1402}
2024-11-05 00:04:04,674:INFO:Creating Dashboard logs
2024-11-05 00:04:04,681:INFO:Model: K Neighbors Classifier
2024-11-05 00:04:04,746:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2024-11-05 00:04:05,207:INFO:Creating Dashboard logs
2024-11-05 00:04:05,215:INFO:Model: Decision Tree Classifier
2024-11-05 00:04:05,279:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 1402, 'splitter': 'best'}
2024-11-05 00:04:05,690:INFO:Creating Dashboard logs
2024-11-05 00:04:05,701:INFO:Model: SVM - Linear Kernel
2024-11-05 00:04:05,783:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 1402, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2024-11-05 00:04:06,259:INFO:Creating Dashboard logs
2024-11-05 00:04:06,263:INFO:Model: Naive Bayes
2024-11-05 00:04:06,331:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2024-11-05 00:04:06,688:INFO:Creating Dashboard logs
2024-11-05 00:04:06,694:INFO:Model: Quadratic Discriminant Analysis
2024-11-05 00:04:06,753:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2024-11-05 00:04:07,265:INFO:_master_model_container: 15
2024-11-05 00:04:07,265:INFO:_display_container: 3
2024-11-05 00:04:07,265:INFO:DummyClassifier(constant=None, random_state=1402, strategy='prior')
2024-11-05 00:04:07,265:INFO:compare_models() successfully completed......................................
2024-11-05 00:06:44,839:INFO:Initializing create_model()
2024-11-05 00:06:44,839:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=dummy, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:06:44,839:INFO:Checking exceptions
2024-11-05 00:06:44,869:INFO:Importing libraries
2024-11-05 00:06:44,869:INFO:Copying training dataset
2024-11-05 00:06:44,888:INFO:Defining folds
2024-11-05 00:06:44,888:INFO:Declaring metric variables
2024-11-05 00:06:44,896:INFO:Importing untrained model
2024-11-05 00:06:44,907:INFO:Dummy Classifier Imported successfully
2024-11-05 00:06:44,946:INFO:Starting cross validation
2024-11-05 00:06:44,952:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:06:45,334:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,337:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,339:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,341:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:06:45,342:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,344:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,345:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:06:45,345:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:06:45,348:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,348:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,365:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,365:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,365:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:06:45,365:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,533:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,548:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,548:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 00:06:45,548:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:06:45,564:INFO:Calculating mean and std
2024-11-05 00:06:45,565:INFO:Creating metrics dataframe
2024-11-05 00:06:45,567:INFO:Finalizing model
2024-11-05 00:06:45,715:INFO:Creating Dashboard logs
2024-11-05 00:06:45,734:INFO:Model: Dummy Classifier
2024-11-05 00:06:45,781:INFO:Logged params: {'constant': None, 'random_state': 1402, 'strategy': 'prior'}
2024-11-05 00:06:45,931:INFO:Initializing predict_model()
2024-11-05 00:06:45,931:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023B83489750>)
2024-11-05 00:06:45,931:INFO:Checking exceptions
2024-11-05 00:06:45,931:INFO:Preloading libraries
2024-11-05 00:06:46,336:INFO:Uploading results into container
2024-11-05 00:06:46,336:INFO:Uploading model into container now
2024-11-05 00:06:46,351:INFO:_master_model_container: 16
2024-11-05 00:06:46,351:INFO:_display_container: 4
2024-11-05 00:06:46,351:INFO:DummyClassifier(constant=None, random_state=1402, strategy='prior')
2024-11-05 00:06:46,351:INFO:create_model() successfully completed......................................
2024-11-05 00:08:27,327:INFO:Initializing evaluate_model()
2024-11-05 00:08:27,327:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=dummy, fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-05 00:08:27,356:INFO:Initializing plot_model()
2024-11-05 00:08:27,356:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=dummy, feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, system=True)
2024-11-05 00:08:27,356:INFO:Checking exceptions
2024-11-05 00:08:40,035:INFO:Initializing evaluate_model()
2024-11-05 00:08:40,035:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-05 00:08:40,055:INFO:Initializing plot_model()
2024-11-05 00:08:40,056:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, system=True)
2024-11-05 00:08:40,056:INFO:Checking exceptions
2024-11-05 00:08:40,061:INFO:Preloading libraries
2024-11-05 00:08:40,061:INFO:Copying training dataset
2024-11-05 00:08:40,062:INFO:Plot type: pipeline
2024-11-05 00:08:40,402:INFO:Visual Rendered Successfully
2024-11-05 00:08:40,531:INFO:plot_model() successfully completed......................................
2024-11-05 00:11:16,167:INFO:Initializing plot_model()
2024-11-05 00:11:16,168:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, system=True)
2024-11-05 00:11:16,168:INFO:Checking exceptions
2024-11-05 00:11:16,172:INFO:Preloading libraries
2024-11-05 00:11:16,173:INFO:Copying training dataset
2024-11-05 00:11:16,173:INFO:Plot type: auc
2024-11-05 00:11:16,426:INFO:Fitting Model
2024-11-05 00:11:16,427:INFO:Scoring test/hold-out set
2024-11-05 00:11:16,675:INFO:Visual Rendered Successfully
2024-11-05 00:11:16,829:INFO:plot_model() successfully completed......................................
2024-11-05 00:11:29,450:INFO:Initializing plot_model()
2024-11-05 00:11:29,450:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DummyClassifier(constant=None, random_state=1402, strategy='prior'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, system=True)
2024-11-05 00:11:29,451:INFO:Checking exceptions
2024-11-05 00:11:29,458:INFO:Preloading libraries
2024-11-05 00:11:29,458:INFO:Copying training dataset
2024-11-05 00:11:29,459:INFO:Plot type: pipeline
2024-11-05 00:11:29,706:INFO:Visual Rendered Successfully
2024-11-05 00:11:29,889:INFO:plot_model() successfully completed......................................
2024-11-05 00:12:33,288:INFO:Initializing create_model()
2024-11-05 00:12:33,288:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 00:12:33,288:INFO:Checking exceptions
2024-11-05 00:12:33,327:INFO:Importing libraries
2024-11-05 00:12:33,327:INFO:Copying training dataset
2024-11-05 00:12:33,342:INFO:Defining folds
2024-11-05 00:12:33,342:INFO:Declaring metric variables
2024-11-05 00:12:33,351:INFO:Importing untrained model
2024-11-05 00:12:33,363:INFO:Decision Tree Classifier Imported successfully
2024-11-05 00:12:33,409:INFO:Starting cross validation
2024-11-05 00:12:33,414:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 00:12:42,878:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:42,884:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:42,891:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:42,956:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:42,963:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:42,975:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,203:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,209:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,216:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,379:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,388:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,393:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,508:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,511:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,514:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 00:12:43,524:INFO:Calculating mean and std
2024-11-05 00:12:43,526:INFO:Creating metrics dataframe
2024-11-05 00:12:43,541:INFO:Finalizing model
2024-11-05 00:12:43,688:INFO:Creating Dashboard logs
2024-11-05 00:12:43,692:INFO:Model: Decision Tree Classifier
2024-11-05 00:12:43,743:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 1402, 'splitter': 'best'}
2024-11-05 00:12:43,897:INFO:Initializing predict_model()
2024-11-05 00:12:43,897:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1402, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023B86947910>)
2024-11-05 00:12:43,897:INFO:Checking exceptions
2024-11-05 00:12:43,897:INFO:Preloading libraries
2024-11-05 00:12:44,340:INFO:Uploading results into container
2024-11-05 00:12:44,341:INFO:Uploading model into container now
2024-11-05 00:12:44,357:INFO:_master_model_container: 17
2024-11-05 00:12:44,358:INFO:_display_container: 5
2024-11-05 00:12:44,358:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1402, splitter='best')
2024-11-05 00:12:44,359:INFO:create_model() successfully completed......................................
2024-11-05 00:13:29,039:INFO:Initializing evaluate_model()
2024-11-05 00:13:29,039:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1402, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-05 00:13:29,060:INFO:Initializing plot_model()
2024-11-05 00:13:29,061:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1402, splitter='best'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, system=True)
2024-11-05 00:13:29,061:INFO:Checking exceptions
2024-11-05 00:13:29,065:INFO:Preloading libraries
2024-11-05 00:13:29,066:INFO:Copying training dataset
2024-11-05 00:13:29,066:INFO:Plot type: pipeline
2024-11-05 00:13:29,351:INFO:Visual Rendered Successfully
2024-11-05 00:13:29,480:INFO:plot_model() successfully completed......................................
2024-11-05 00:13:33,038:INFO:Initializing plot_model()
2024-11-05 00:13:33,038:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1402, splitter='best'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, system=True)
2024-11-05 00:13:33,038:INFO:Checking exceptions
2024-11-05 00:13:33,041:INFO:Preloading libraries
2024-11-05 00:13:33,042:INFO:Copying training dataset
2024-11-05 00:13:33,042:INFO:Plot type: auc
2024-11-05 00:13:33,275:INFO:Fitting Model
2024-11-05 00:13:33,276:INFO:Scoring test/hold-out set
2024-11-05 00:13:33,536:INFO:Visual Rendered Successfully
2024-11-05 00:13:33,672:INFO:plot_model() successfully completed......................................
2024-11-05 00:14:58,811:INFO:Initializing predict_model()
2024-11-05 00:14:58,811:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023BFA666B00>)
2024-11-05 00:14:58,812:INFO:Checking exceptions
2024-11-05 00:14:58,812:INFO:Preloading libraries
2024-11-05 00:14:58,816:INFO:Set up data.
2024-11-05 00:14:58,831:INFO:Set up index.
2024-11-05 00:15:12,660:INFO:Initializing predict_model()
2024-11-05 00:15:12,661:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023B8348A4D0>)
2024-11-05 00:15:12,661:INFO:Checking exceptions
2024-11-05 00:15:12,661:INFO:Preloading libraries
2024-11-05 00:15:12,664:INFO:Set up data.
2024-11-05 00:15:12,678:INFO:Set up index.
2024-11-05 00:15:20,106:INFO:Initializing predict_model()
2024-11-05 00:15:20,107:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023BFA64D0F0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023B84E21000>)
2024-11-05 00:15:20,107:INFO:Checking exceptions
2024-11-05 00:15:20,107:INFO:Preloading libraries
2024-11-05 00:15:20,111:INFO:Set up data.
2024-11-05 00:15:20,128:INFO:Set up index.
2024-11-05 00:18:29,879:INFO:Initializing save_model()
2024-11-05 00:18:29,880:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1402, verbose=0,
                       warm_start=False), model_name=model_rf, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-05 00:18:29,880:INFO:Adding model into prep_pipe
2024-11-05 00:18:29,961:INFO:model_rf.pkl saved in current working directory
2024-11-05 00:18:30,003:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_featur...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=1402, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-05 00:18:30,003:INFO:save_model() successfully completed......................................
2024-11-05 00:20:21,807:INFO:Initializing load_model()
2024-11-05 00:20:21,807:INFO:load_model(model_name=model_rf, platform=None, authentication=None, verbose=True)
2024-11-05 11:36:15,335:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-05 11:36:15,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-05 11:36:15,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-05 11:36:15,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-11-05 11:36:44,971:INFO:PyCaret ClassificationExperiment
2024-11-05 11:36:44,972:INFO:Logging name: clf-default-name
2024-11-05 11:36:44,972:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-05 11:36:44,972:INFO:version 3.3.2
2024-11-05 11:36:44,972:INFO:Initializing setup()
2024-11-05 11:36:44,972:INFO:self.USI: bd83
2024-11-05 11:36:44,972:INFO:self._variable_keys: {'target_param', 'exp_id', 'n_jobs_param', 'seed', 'exp_name_log', 'data', 'gpu_param', 'X_train', 'fix_imbalance', 'y_test', '_ml_usecase', 'y_train', 'y', 'pipeline', 'gpu_n_jobs_param', 'USI', '_available_plots', 'memory', 'log_plots_param', 'html_param', 'fold_generator', 'idx', 'X_test', 'X', 'logging_param', 'fold_shuffle_param', 'fold_groups_param', 'is_multiclass'}
2024-11-05 11:36:44,972:INFO:Checking environment
2024-11-05 11:36:44,972:INFO:python_version: 3.10.11
2024-11-05 11:36:44,973:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2024-11-05 11:36:44,973:INFO:machine: AMD64
2024-11-05 11:36:44,973:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-05 11:36:44,976:INFO:Memory: svmem(total=12716195840, available=4758372352, percent=62.6, used=7957823488, free=4758372352)
2024-11-05 11:36:44,976:INFO:Physical Core: 2
2024-11-05 11:36:44,976:INFO:Logical Core: 4
2024-11-05 11:36:44,976:INFO:Checking libraries
2024-11-05 11:36:44,976:INFO:System:
2024-11-05 11:36:44,976:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2024-11-05 11:36:44,977:INFO:executable: c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\python.exe
2024-11-05 11:36:44,977:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-05 11:36:44,977:INFO:PyCaret required dependencies:
2024-11-05 11:36:45,105:INFO:                 pip: 23.0.1
2024-11-05 11:36:45,106:INFO:          setuptools: 65.5.0
2024-11-05 11:36:45,106:INFO:             pycaret: 3.3.2
2024-11-05 11:36:45,106:INFO:             IPython: 8.29.0
2024-11-05 11:36:45,106:INFO:          ipywidgets: 8.1.5
2024-11-05 11:36:45,106:INFO:                tqdm: 4.66.6
2024-11-05 11:36:45,106:INFO:               numpy: 1.26.4
2024-11-05 11:36:45,106:INFO:              pandas: 2.1.4
2024-11-05 11:36:45,107:INFO:              jinja2: 3.1.4
2024-11-05 11:36:45,107:INFO:               scipy: 1.11.4
2024-11-05 11:36:45,107:INFO:              joblib: 1.3.2
2024-11-05 11:36:45,107:INFO:             sklearn: 1.4.2
2024-11-05 11:36:45,107:INFO:                pyod: 2.0.2
2024-11-05 11:36:45,107:INFO:            imblearn: 0.12.4
2024-11-05 11:36:45,107:INFO:   category_encoders: 2.6.4
2024-11-05 11:36:45,107:INFO:            lightgbm: 4.5.0
2024-11-05 11:36:45,107:INFO:               numba: 0.60.0
2024-11-05 11:36:45,107:INFO:            requests: 2.32.3
2024-11-05 11:36:45,107:INFO:          matplotlib: 3.7.5
2024-11-05 11:36:45,107:INFO:          scikitplot: 0.3.7
2024-11-05 11:36:45,107:INFO:         yellowbrick: 1.5
2024-11-05 11:36:45,107:INFO:              plotly: 5.24.1
2024-11-05 11:36:45,108:INFO:    plotly-resampler: Not installed
2024-11-05 11:36:45,108:INFO:             kaleido: 0.2.1
2024-11-05 11:36:45,108:INFO:           schemdraw: 0.15
2024-11-05 11:36:45,108:INFO:         statsmodels: 0.14.4
2024-11-05 11:36:45,108:INFO:              sktime: 0.26.0
2024-11-05 11:36:45,108:INFO:               tbats: 1.1.3
2024-11-05 11:36:45,108:INFO:            pmdarima: 2.0.4
2024-11-05 11:36:45,108:INFO:              psutil: 6.1.0
2024-11-05 11:36:45,108:INFO:          markupsafe: 3.0.2
2024-11-05 11:36:45,108:INFO:             pickle5: Not installed
2024-11-05 11:36:45,108:INFO:         cloudpickle: 3.1.0
2024-11-05 11:36:45,108:INFO:         deprecation: 2.1.0
2024-11-05 11:36:45,108:INFO:              xxhash: 3.5.0
2024-11-05 11:36:45,108:INFO:           wurlitzer: Not installed
2024-11-05 11:36:45,109:INFO:PyCaret optional dependencies:
2024-11-05 11:36:45,156:INFO:                shap: Not installed
2024-11-05 11:36:45,157:INFO:           interpret: Not installed
2024-11-05 11:36:45,157:INFO:                umap: Not installed
2024-11-05 11:36:45,157:INFO:     ydata_profiling: 4.12.0
2024-11-05 11:36:45,157:INFO:  explainerdashboard: Not installed
2024-11-05 11:36:45,157:INFO:             autoviz: Not installed
2024-11-05 11:36:45,157:INFO:           fairlearn: Not installed
2024-11-05 11:36:45,157:INFO:          deepchecks: Not installed
2024-11-05 11:36:45,157:INFO:             xgboost: Not installed
2024-11-05 11:36:45,158:INFO:            catboost: Not installed
2024-11-05 11:36:45,158:INFO:              kmodes: Not installed
2024-11-05 11:36:45,158:INFO:             mlxtend: Not installed
2024-11-05 11:36:45,158:INFO:       statsforecast: Not installed
2024-11-05 11:36:45,158:INFO:        tune_sklearn: Not installed
2024-11-05 11:36:45,158:INFO:                 ray: Not installed
2024-11-05 11:36:45,158:INFO:            hyperopt: Not installed
2024-11-05 11:36:45,158:INFO:              optuna: Not installed
2024-11-05 11:36:45,158:INFO:               skopt: Not installed
2024-11-05 11:36:45,158:INFO:              mlflow: 2.17.2
2024-11-05 11:36:45,159:INFO:              gradio: Not installed
2024-11-05 11:36:45,159:INFO:             fastapi: Not installed
2024-11-05 11:36:45,159:INFO:             uvicorn: Not installed
2024-11-05 11:36:45,159:INFO:              m2cgen: Not installed
2024-11-05 11:36:45,159:INFO:           evidently: Not installed
2024-11-05 11:36:45,159:INFO:               fugue: Not installed
2024-11-05 11:36:45,159:INFO:           streamlit: Not installed
2024-11-05 11:36:45,159:INFO:             prophet: Not installed
2024-11-05 11:36:45,159:INFO:None
2024-11-05 11:36:45,159:INFO:Set up data.
2024-11-05 11:36:45,173:INFO:Set up folding strategy.
2024-11-05 11:36:45,173:INFO:Set up train/test split.
2024-11-05 11:36:45,187:INFO:Set up index.
2024-11-05 11:36:45,188:INFO:Assigning column types.
2024-11-05 11:36:45,195:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-05 11:36:45,330:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-05 11:36:45,337:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 11:36:45,387:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,387:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,451:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-05 11:36:45,452:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 11:36:45,485:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,485:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,487:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-05 11:36:45,550:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 11:36:45,593:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,593:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,658:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 11:36:45,694:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,694:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,694:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-05 11:36:45,793:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,793:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,908:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,909:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:45,911:INFO:Preparing preprocessing pipeline...
2024-11-05 11:36:45,913:INFO:Set up label encoding.
2024-11-05 11:36:45,913:INFO:Set up simple imputation.
2024-11-05 11:36:45,924:INFO:Set up encoding of ordinal features.
2024-11-05 11:36:45,927:INFO:Set up encoding of categorical features.
2024-11-05 11:36:45,927:INFO:Set up removing multicollinearity.
2024-11-05 11:36:45,927:INFO:Set up column transformation.
2024-11-05 11:36:45,927:INFO:Set up feature normalization.
2024-11-05 11:36:45,928:INFO:Set up column name cleaning.
2024-11-05 11:36:46,465:INFO:Finished creating preprocessing pipeline.
2024-11-05 11:36:46,505:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-05 11:36:46,505:INFO:Creating final display dataframe.
2024-11-05 11:36:46,988:INFO:Setup _display_container:                     Description              Value
0                    Session id               8709
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (317, 11)
5        Transformed data shape          (317, 18)
6   Transformed train set shape          (221, 18)
7    Transformed test set shape           (96, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment       MlflowLogger
27              Experiment Name   clf-default-name
28                          USI               bd83
2024-11-05 11:36:47,278:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:47,278:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:47,376:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:47,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 11:36:47,378:INFO:Logging experiment in loggers
2024-11-05 11:36:47,819:INFO:SubProcess save_model() called ==================================
2024-11-05 11:36:47,887:INFO:Initializing save_model()
2024-11-05 11:36:47,888:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\SHAHRIAR\AppData\Local\Temp\tmpl2964f3v\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-05 11:36:47,888:INFO:Adding model into prep_pipe
2024-11-05 11:36:47,888:WARNING:Only Model saved as it was a pipeline.
2024-11-05 11:36:47,897:INFO:C:\Users\SHAHRIAR\AppData\Local\Temp\tmpl2964f3v\Transformation Pipeline.pkl saved in current working directory
2024-11-05 11:36:47,930:INFO:Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-05 11:36:47,930:INFO:save_model() successfully completed......................................
2024-11-05 11:36:48,409:INFO:SubProcess save_model() end ==================================
2024-11-05 11:36:48,540:INFO:setup() successfully completed in 2.42s...............
2024-11-05 11:36:48,566:INFO:Initializing create_model()
2024-11-05 11:36:48,566:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:36:48,566:INFO:Checking exceptions
2024-11-05 11:36:48,613:INFO:Importing libraries
2024-11-05 11:36:48,613:INFO:Copying training dataset
2024-11-05 11:36:48,621:INFO:Defining folds
2024-11-05 11:36:48,622:INFO:Declaring metric variables
2024-11-05 11:36:48,636:INFO:Importing untrained model
2024-11-05 11:36:48,642:INFO:Random Forest Classifier Imported successfully
2024-11-05 11:36:48,656:INFO:Starting cross validation
2024-11-05 11:36:48,662:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:36:57,988:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:57,995:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,000:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:36:58,007:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,028:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,038:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,044:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:36:58,051:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,076:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,084:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,087:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:36:58,090:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,261:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,268:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,271:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:36:58,275:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,874:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,878:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,878:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:36:58,901:INFO:Calculating mean and std
2024-11-05 11:36:58,903:INFO:Creating metrics dataframe
2024-11-05 11:36:58,911:INFO:Finalizing model
2024-11-05 11:36:59,278:INFO:Creating Dashboard logs
2024-11-05 11:36:59,289:INFO:Model: Random Forest Classifier
2024-11-05 11:36:59,427:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8709, 'verbose': 0, 'warm_start': False}
2024-11-05 11:36:59,599:INFO:Initializing predict_model()
2024-11-05 11:36:59,599:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8709, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E376539AB0>)
2024-11-05 11:36:59,599:INFO:Checking exceptions
2024-11-05 11:36:59,599:INFO:Preloading libraries
2024-11-05 11:37:02,288:INFO:Uploading results into container
2024-11-05 11:37:02,291:INFO:Uploading model into container now
2024-11-05 11:37:02,307:INFO:_master_model_container: 1
2024-11-05 11:37:02,307:INFO:_display_container: 2
2024-11-05 11:37:02,308:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8709, verbose=0,
                       warm_start=False)
2024-11-05 11:37:02,308:INFO:create_model() successfully completed......................................
2024-11-05 11:37:02,443:INFO:Initializing get_config()
2024-11-05 11:37:02,444:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, variable=None)
2024-11-05 11:37:02,472:INFO:Initializing get_config()
2024-11-05 11:37:02,473:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, variable=X_test)
2024-11-05 11:37:02,474:INFO:Variable: 'X_test' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_test_transformed' instead.
2024-11-05 11:37:02,491:INFO:Variable:  returned as       Age  Gender  Protein1  Protein2  Protein3  Protein4 Tumour_Stage  \
326  46.0  FEMALE  -0.74014  -0.73755  0.720320  0.721820           II   
130  32.0  FEMALE   0.12545   1.45650 -0.680300 -0.010378            I   
134  70.0  FEMALE   1.06740   0.99713 -0.586220  0.486220            I   
239  48.0  FEMALE  -0.34001   0.16257 -0.177200  0.412550           II   
92   59.0  FEMALE   0.48045   0.63135 -0.701000 -0.162030          III   
..    ...     ...       ...       ...       ...       ...          ...   
87   85.0  FEMALE   0.53809   0.28109 -0.106420  0.239630            I   
209  54.0  FEMALE   0.51432   1.69360 -0.144010  1.024900          III   
199  51.0  FEMALE  -0.47620   1.79460 -0.147730 -0.307780           II   
246  56.0  FEMALE   0.45517   1.17740 -0.574560  0.366350            I   
67   74.0  FEMALE  -0.03164   2.28060  0.008575 -0.538010            I   

                         Histology HER2 status                 Surgery_type  
326  Infiltrating Ductal Carcinoma    Negative            Simple Mastectomy  
130  Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
134  Infiltrating Ductal Carcinoma    Negative                   Lumpectomy  
239             Mucinous Carcinoma    Negative            Simple Mastectomy  
92   Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
..                             ...         ...                          ...  
87              Mucinous Carcinoma    Negative                   Lumpectomy  
209  Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
199  Infiltrating Ductal Carcinoma    Negative  Modified Radical Mastectomy  
246             Mucinous Carcinoma    Negative  Modified Radical Mastectomy  
67   Infiltrating Ductal Carcinoma    Negative                   Lumpectomy  

[96 rows x 10 columns]
2024-11-05 11:37:02,491:INFO:get_config() successfully completed......................................
2024-11-05 11:37:02,539:INFO:Initializing get_config()
2024-11-05 11:37:02,539:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, variable=X_test_transformed)
2024-11-05 11:37:02,679:INFO:Variable: X_test returned as           Age    Gender  Protein1  Protein2  Protein3  Protein4  \
326 -1.016115 -0.117309 -1.217615 -1.821734  1.393350  1.200614   
130 -2.370288 -0.117309  0.259715  0.570399 -1.073409 -0.107886   
134  0.880729 -0.117309  2.388804  0.023974 -0.848510  0.750860   
239 -0.840985 -0.117309 -0.583658 -0.914194  0.028086  0.615465   
92   0.061448 -0.117309  1.001480 -0.397036 -1.124014 -0.342950   
..        ...       ...       ...       ...       ...       ...   
87   1.897189 -0.117309  1.129317 -0.786152  0.162246  0.308162   
209 -0.336961 -0.117309  1.076362  0.859150  0.091667  1.813957   
199 -0.585165 -0.117309 -0.807014  0.983421  0.084600 -0.558191   
246 -0.175410 -0.117309  0.946034  0.236230 -0.821224  0.531894   
67   1.161977 -0.117309 -0.041136  1.591158  0.368534 -0.880622   

     Tumour_Stage_I  Tumour_Stage_III  Tumour_Stage_II  \
326       -0.477261         -0.568642         0.868313   
130        2.095291         -0.568642        -1.151658   
134        2.095291         -0.568642        -1.151658   
239       -0.477261         -0.568642         0.868313   
92        -0.477261          1.758577        -1.151658   
..              ...               ...              ...   
87         2.095291         -0.568642        -1.151658   
209       -0.477261          1.758577        -1.151658   
199       -0.477261         -0.568642         0.868313   
246        2.095291         -0.568642        -1.151658   
67         2.095291         -0.568642        -1.151658   

     Histology_Infiltrating Ductal Carcinoma  \
326                                 0.624449   
130                                 0.624449   
134                                 0.624449   
239                                -1.601411   
92                                  0.624449   
..                                       ...   
87                                 -1.601411   
209                                 0.624449   
199                                 0.624449   
246                                -1.601411   
67                                  0.624449   

     Histology_Infiltrating Lobular Carcinoma  Histology_Mucinous Carcinoma  \
326                                 -0.561673                     -0.206041   
130                                 -0.561673                     -0.206041   
134                                 -0.561673                     -0.206041   
239                                 -0.561673                      4.853407   
92                                  -0.561673                     -0.206041   
..                                        ...                           ...   
87                                  -0.561673                      4.853407   
209                                 -0.561673                     -0.206041   
199                                 -0.561673                     -0.206041   
246                                 -0.561673                      4.853407   
67                                  -0.561673                     -0.206041   

     HER2 status  Surgery_type_Other  Surgery_type_Simple Mastectomy  \
326    -0.349038           -0.695141                        1.924091   
130    -0.349038           -0.695141                       -0.519726   
134    -0.349038           -0.695141                       -0.519726   
239    -0.349038           -0.695141                        1.924091   
92     -0.349038           -0.695141                       -0.519726   
..           ...                 ...                             ...   
87     -0.349038           -0.695141                       -0.519726   
209    -0.349038           -0.695141                       -0.519726   
199    -0.349038           -0.695141                       -0.519726   
246    -0.349038           -0.695141                       -0.519726   
67     -0.349038           -0.695141                       -0.519726   

     Surgery_type_Lumpectomy  Surgery_type_Modified Radical Mastectomy  
326                -0.470100                                 -0.624449  
130                -0.470100                                  1.601411  
134                 2.127205                                 -0.624449  
239                -0.470100                                 -0.624449  
92                 -0.470100                                  1.601411  
..                       ...                                       ...  
87                  2.127205                                 -0.624449  
209                -0.470100                                  1.601411  
199                -0.470100                                  1.601411  
246                -0.470100                                  1.601411  
67                  2.127205                                 -0.624449  

[96 rows x 17 columns]
2024-11-05 11:37:02,679:INFO:get_config() successfully completed......................................
2024-11-05 11:37:02,722:INFO:Initializing get_config()
2024-11-05 11:37:02,722:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, variable=target_param)
2024-11-05 11:37:02,723:INFO:Variable:  returned as Patient_Status
2024-11-05 11:37:02,723:INFO:get_config() successfully completed......................................
2024-11-05 11:37:02,747:INFO:Initializing compare_models()
2024-11-05 11:37:02,747:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-05 11:37:02,748:INFO:Checking exceptions
2024-11-05 11:37:02,756:INFO:Preparing display monitor
2024-11-05 11:37:02,823:INFO:Initializing Logistic Regression
2024-11-05 11:37:02,823:INFO:Total runtime is 0.0 minutes
2024-11-05 11:37:02,833:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:02,834:INFO:Initializing create_model()
2024-11-05 11:37:02,834:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:02,835:INFO:Checking exceptions
2024-11-05 11:37:02,835:INFO:Importing libraries
2024-11-05 11:37:02,835:INFO:Copying training dataset
2024-11-05 11:37:02,848:INFO:Defining folds
2024-11-05 11:37:02,848:INFO:Declaring metric variables
2024-11-05 11:37:02,908:INFO:Importing untrained model
2024-11-05 11:37:02,929:INFO:Logistic Regression Imported successfully
2024-11-05 11:37:02,974:INFO:Starting cross validation
2024-11-05 11:37:02,979:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:03,410:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,418:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,418:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,421:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:03,424:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,425:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,434:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,435:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,441:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,441:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,443:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:03,448:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,623:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,626:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,629:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:03,631:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:03,649:INFO:Calculating mean and std
2024-11-05 11:37:03,650:INFO:Creating metrics dataframe
2024-11-05 11:37:03,652:INFO:Uploading results into container
2024-11-05 11:37:03,652:INFO:Uploading model into container now
2024-11-05 11:37:03,653:INFO:_master_model_container: 2
2024-11-05 11:37:03,653:INFO:_display_container: 3
2024-11-05 11:37:03,653:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8709, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-05 11:37:03,653:INFO:create_model() successfully completed......................................
2024-11-05 11:37:03,786:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:03,786:INFO:Creating metrics dataframe
2024-11-05 11:37:03,792:INFO:Initializing K Neighbors Classifier
2024-11-05 11:37:03,792:INFO:Total runtime is 0.01615376869837443 minutes
2024-11-05 11:37:03,798:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:03,799:INFO:Initializing create_model()
2024-11-05 11:37:03,800:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:03,801:INFO:Checking exceptions
2024-11-05 11:37:03,801:INFO:Importing libraries
2024-11-05 11:37:03,801:INFO:Copying training dataset
2024-11-05 11:37:03,808:INFO:Defining folds
2024-11-05 11:37:03,809:INFO:Declaring metric variables
2024-11-05 11:37:03,817:INFO:Importing untrained model
2024-11-05 11:37:03,828:INFO:K Neighbors Classifier Imported successfully
2024-11-05 11:37:03,851:INFO:Starting cross validation
2024-11-05 11:37:03,855:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:04,443:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,447:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,452:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,453:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,455:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,458:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,459:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,470:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,477:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,489:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,494:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,499:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,691:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,694:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,700:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:04,708:INFO:Calculating mean and std
2024-11-05 11:37:04,710:INFO:Creating metrics dataframe
2024-11-05 11:37:04,718:INFO:Uploading results into container
2024-11-05 11:37:04,719:INFO:Uploading model into container now
2024-11-05 11:37:04,719:INFO:_master_model_container: 3
2024-11-05 11:37:04,719:INFO:_display_container: 3
2024-11-05 11:37:04,720:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-05 11:37:04,720:INFO:create_model() successfully completed......................................
2024-11-05 11:37:04,828:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:04,828:INFO:Creating metrics dataframe
2024-11-05 11:37:04,847:INFO:Initializing Naive Bayes
2024-11-05 11:37:04,847:INFO:Total runtime is 0.03372063239415486 minutes
2024-11-05 11:37:04,851:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:04,852:INFO:Initializing create_model()
2024-11-05 11:37:04,852:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:04,853:INFO:Checking exceptions
2024-11-05 11:37:04,853:INFO:Importing libraries
2024-11-05 11:37:04,853:INFO:Copying training dataset
2024-11-05 11:37:04,858:INFO:Defining folds
2024-11-05 11:37:04,858:INFO:Declaring metric variables
2024-11-05 11:37:04,864:INFO:Importing untrained model
2024-11-05 11:37:04,874:INFO:Naive Bayes Imported successfully
2024-11-05 11:37:04,891:INFO:Starting cross validation
2024-11-05 11:37:04,895:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:05,312:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,314:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,317:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,318:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,320:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,324:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,324:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,328:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,330:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,345:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,350:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,351:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,552:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,555:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,558:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:05,570:INFO:Calculating mean and std
2024-11-05 11:37:05,574:INFO:Creating metrics dataframe
2024-11-05 11:37:05,583:INFO:Uploading results into container
2024-11-05 11:37:05,585:INFO:Uploading model into container now
2024-11-05 11:37:05,587:INFO:_master_model_container: 4
2024-11-05 11:37:05,587:INFO:_display_container: 3
2024-11-05 11:37:05,587:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-05 11:37:05,588:INFO:create_model() successfully completed......................................
2024-11-05 11:37:05,708:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:05,708:INFO:Creating metrics dataframe
2024-11-05 11:37:05,718:INFO:Initializing Decision Tree Classifier
2024-11-05 11:37:05,718:INFO:Total runtime is 0.04824769894282023 minutes
2024-11-05 11:37:05,722:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:05,722:INFO:Initializing create_model()
2024-11-05 11:37:05,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:05,723:INFO:Checking exceptions
2024-11-05 11:37:05,724:INFO:Importing libraries
2024-11-05 11:37:05,724:INFO:Copying training dataset
2024-11-05 11:37:05,730:INFO:Defining folds
2024-11-05 11:37:05,730:INFO:Declaring metric variables
2024-11-05 11:37:05,734:INFO:Importing untrained model
2024-11-05 11:37:05,745:INFO:Decision Tree Classifier Imported successfully
2024-11-05 11:37:05,758:INFO:Starting cross validation
2024-11-05 11:37:05,765:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:06,160:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,168:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,171:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,174:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,178:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,184:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,184:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,189:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,191:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,198:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,204:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,435:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,440:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,446:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:06,461:INFO:Calculating mean and std
2024-11-05 11:37:06,464:INFO:Creating metrics dataframe
2024-11-05 11:37:06,468:INFO:Uploading results into container
2024-11-05 11:37:06,469:INFO:Uploading model into container now
2024-11-05 11:37:06,469:INFO:_master_model_container: 5
2024-11-05 11:37:06,470:INFO:_display_container: 3
2024-11-05 11:37:06,470:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8709, splitter='best')
2024-11-05 11:37:06,470:INFO:create_model() successfully completed......................................
2024-11-05 11:37:06,612:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:06,613:INFO:Creating metrics dataframe
2024-11-05 11:37:06,623:INFO:Initializing SVM - Linear Kernel
2024-11-05 11:37:06,624:INFO:Total runtime is 0.06334774494171143 minutes
2024-11-05 11:37:06,628:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:06,628:INFO:Initializing create_model()
2024-11-05 11:37:06,628:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:06,628:INFO:Checking exceptions
2024-11-05 11:37:06,628:INFO:Importing libraries
2024-11-05 11:37:06,628:INFO:Copying training dataset
2024-11-05 11:37:06,638:INFO:Defining folds
2024-11-05 11:37:06,639:INFO:Declaring metric variables
2024-11-05 11:37:06,645:INFO:Importing untrained model
2024-11-05 11:37:06,654:INFO:SVM - Linear Kernel Imported successfully
2024-11-05 11:37:06,672:INFO:Starting cross validation
2024-11-05 11:37:06,677:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:07,062:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,065:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,065:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,068:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,071:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,072:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,074:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,076:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,081:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,081:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,087:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,092:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,282:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,285:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,288:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:07,293:INFO:Calculating mean and std
2024-11-05 11:37:07,296:INFO:Creating metrics dataframe
2024-11-05 11:37:07,298:INFO:Uploading results into container
2024-11-05 11:37:07,299:INFO:Uploading model into container now
2024-11-05 11:37:07,299:INFO:_master_model_container: 6
2024-11-05 11:37:07,299:INFO:_display_container: 3
2024-11-05 11:37:07,300:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8709, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-05 11:37:07,300:INFO:create_model() successfully completed......................................
2024-11-05 11:37:07,416:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:07,416:INFO:Creating metrics dataframe
2024-11-05 11:37:07,427:INFO:Initializing Ridge Classifier
2024-11-05 11:37:07,428:INFO:Total runtime is 0.07672638495763143 minutes
2024-11-05 11:37:07,436:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:07,436:INFO:Initializing create_model()
2024-11-05 11:37:07,436:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:07,436:INFO:Checking exceptions
2024-11-05 11:37:07,436:INFO:Importing libraries
2024-11-05 11:37:07,436:INFO:Copying training dataset
2024-11-05 11:37:07,441:INFO:Defining folds
2024-11-05 11:37:07,442:INFO:Declaring metric variables
2024-11-05 11:37:07,453:INFO:Importing untrained model
2024-11-05 11:37:07,459:INFO:Ridge Classifier Imported successfully
2024-11-05 11:37:07,491:INFO:Starting cross validation
2024-11-05 11:37:07,506:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:07,989:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,000:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,004:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:08,008:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,009:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,015:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,027:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,031:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,034:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:08,037:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,040:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,049:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,056:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,059:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:08,066:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,236:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,239:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,240:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:08,242:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:08,266:INFO:Calculating mean and std
2024-11-05 11:37:08,269:INFO:Creating metrics dataframe
2024-11-05 11:37:08,274:INFO:Uploading results into container
2024-11-05 11:37:08,274:INFO:Uploading model into container now
2024-11-05 11:37:08,275:INFO:_master_model_container: 7
2024-11-05 11:37:08,275:INFO:_display_container: 3
2024-11-05 11:37:08,275:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8709, solver='auto',
                tol=0.0001)
2024-11-05 11:37:08,275:INFO:create_model() successfully completed......................................
2024-11-05 11:37:08,398:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:08,398:INFO:Creating metrics dataframe
2024-11-05 11:37:08,411:INFO:Initializing Random Forest Classifier
2024-11-05 11:37:08,411:INFO:Total runtime is 0.0931247353553772 minutes
2024-11-05 11:37:08,418:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:08,418:INFO:Initializing create_model()
2024-11-05 11:37:08,418:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:08,418:INFO:Checking exceptions
2024-11-05 11:37:08,418:INFO:Importing libraries
2024-11-05 11:37:08,419:INFO:Copying training dataset
2024-11-05 11:37:08,423:INFO:Defining folds
2024-11-05 11:37:08,423:INFO:Declaring metric variables
2024-11-05 11:37:08,431:INFO:Importing untrained model
2024-11-05 11:37:08,440:INFO:Random Forest Classifier Imported successfully
2024-11-05 11:37:08,461:INFO:Starting cross validation
2024-11-05 11:37:08,468:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:09,520:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,534:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,536:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,542:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,548:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:09,549:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:09,552:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,553:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,603:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,608:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,613:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:09,616:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,809:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,824:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:09,830:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:09,836:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:10,323:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:10,329:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:10,334:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:10,349:INFO:Calculating mean and std
2024-11-05 11:37:10,349:INFO:Creating metrics dataframe
2024-11-05 11:37:10,353:INFO:Uploading results into container
2024-11-05 11:37:10,353:INFO:Uploading model into container now
2024-11-05 11:37:10,353:INFO:_master_model_container: 8
2024-11-05 11:37:10,358:INFO:_display_container: 3
2024-11-05 11:37:10,359:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8709, verbose=0,
                       warm_start=False)
2024-11-05 11:37:10,360:INFO:create_model() successfully completed......................................
2024-11-05 11:37:10,491:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:10,491:INFO:Creating metrics dataframe
2024-11-05 11:37:10,504:INFO:Initializing Quadratic Discriminant Analysis
2024-11-05 11:37:10,504:INFO:Total runtime is 0.1280067205429077 minutes
2024-11-05 11:37:10,509:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:10,509:INFO:Initializing create_model()
2024-11-05 11:37:10,509:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:10,510:INFO:Checking exceptions
2024-11-05 11:37:10,510:INFO:Importing libraries
2024-11-05 11:37:10,511:INFO:Copying training dataset
2024-11-05 11:37:10,516:INFO:Defining folds
2024-11-05 11:37:10,516:INFO:Declaring metric variables
2024-11-05 11:37:10,523:INFO:Importing untrained model
2024-11-05 11:37:10,532:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-05 11:37:10,541:INFO:Starting cross validation
2024-11-05 11:37:10,548:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:11,042:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 11:37:11,047:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 11:37:11,080:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 11:37:11,097:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 11:37:11,146:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,151:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,159:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,166:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,172:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,180:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,185:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,189:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,194:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,199:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,205:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,325:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 11:37:11,397:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,400:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,403:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:11,420:INFO:Calculating mean and std
2024-11-05 11:37:11,424:INFO:Creating metrics dataframe
2024-11-05 11:37:11,435:INFO:Uploading results into container
2024-11-05 11:37:11,436:INFO:Uploading model into container now
2024-11-05 11:37:11,437:INFO:_master_model_container: 9
2024-11-05 11:37:11,437:INFO:_display_container: 3
2024-11-05 11:37:11,438:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-05 11:37:11,438:INFO:create_model() successfully completed......................................
2024-11-05 11:37:11,556:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:11,556:INFO:Creating metrics dataframe
2024-11-05 11:37:11,573:INFO:Initializing Ada Boost Classifier
2024-11-05 11:37:11,573:INFO:Total runtime is 0.14583484331766763 minutes
2024-11-05 11:37:11,581:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:11,582:INFO:Initializing create_model()
2024-11-05 11:37:11,582:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:11,583:INFO:Checking exceptions
2024-11-05 11:37:11,583:INFO:Importing libraries
2024-11-05 11:37:11,584:INFO:Copying training dataset
2024-11-05 11:37:11,591:INFO:Defining folds
2024-11-05 11:37:11,592:INFO:Declaring metric variables
2024-11-05 11:37:11,603:INFO:Importing untrained model
2024-11-05 11:37:11,612:INFO:Ada Boost Classifier Imported successfully
2024-11-05 11:37:11,624:INFO:Starting cross validation
2024-11-05 11:37:11,631:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:12,154:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 11:37:12,154:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 11:37:12,154:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 11:37:12,170:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 11:37:12,504:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,507:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,514:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,520:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,528:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,534:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,538:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,542:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,545:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,549:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,550:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:12,676:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 11:37:13,016:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,019:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,023:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,042:INFO:Calculating mean and std
2024-11-05 11:37:13,044:INFO:Creating metrics dataframe
2024-11-05 11:37:13,046:INFO:Uploading results into container
2024-11-05 11:37:13,047:INFO:Uploading model into container now
2024-11-05 11:37:13,048:INFO:_master_model_container: 10
2024-11-05 11:37:13,048:INFO:_display_container: 3
2024-11-05 11:37:13,048:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=8709)
2024-11-05 11:37:13,050:INFO:create_model() successfully completed......................................
2024-11-05 11:37:13,167:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:13,167:INFO:Creating metrics dataframe
2024-11-05 11:37:13,179:INFO:Initializing Gradient Boosting Classifier
2024-11-05 11:37:13,179:INFO:Total runtime is 0.1725994348526001 minutes
2024-11-05 11:37:13,185:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:13,186:INFO:Initializing create_model()
2024-11-05 11:37:13,186:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:13,186:INFO:Checking exceptions
2024-11-05 11:37:13,186:INFO:Importing libraries
2024-11-05 11:37:13,186:INFO:Copying training dataset
2024-11-05 11:37:13,193:INFO:Defining folds
2024-11-05 11:37:13,193:INFO:Declaring metric variables
2024-11-05 11:37:13,200:INFO:Importing untrained model
2024-11-05 11:37:13,208:INFO:Gradient Boosting Classifier Imported successfully
2024-11-05 11:37:13,222:INFO:Starting cross validation
2024-11-05 11:37:13,230:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:13,890:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,891:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,897:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,897:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,899:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:13,900:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,903:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,906:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,917:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,921:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:13,925:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:14,253:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:14,260:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:14,265:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:14,281:INFO:Calculating mean and std
2024-11-05 11:37:14,283:INFO:Creating metrics dataframe
2024-11-05 11:37:14,286:INFO:Uploading results into container
2024-11-05 11:37:14,287:INFO:Uploading model into container now
2024-11-05 11:37:14,288:INFO:_master_model_container: 11
2024-11-05 11:37:14,288:INFO:_display_container: 3
2024-11-05 11:37:14,289:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8709, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-05 11:37:14,289:INFO:create_model() successfully completed......................................
2024-11-05 11:37:14,578:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:14,578:INFO:Creating metrics dataframe
2024-11-05 11:37:14,589:INFO:Initializing Linear Discriminant Analysis
2024-11-05 11:37:14,590:INFO:Total runtime is 0.1961093266805013 minutes
2024-11-05 11:37:14,598:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:14,598:INFO:Initializing create_model()
2024-11-05 11:37:14,598:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:14,598:INFO:Checking exceptions
2024-11-05 11:37:14,598:INFO:Importing libraries
2024-11-05 11:37:14,599:INFO:Copying training dataset
2024-11-05 11:37:14,603:INFO:Defining folds
2024-11-05 11:37:14,604:INFO:Declaring metric variables
2024-11-05 11:37:14,612:INFO:Importing untrained model
2024-11-05 11:37:14,620:INFO:Linear Discriminant Analysis Imported successfully
2024-11-05 11:37:14,628:INFO:Starting cross validation
2024-11-05 11:37:14,628:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:15,534:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,580:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,604:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,607:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:15,616:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,620:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,630:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,639:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,646:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,701:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,859:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,873:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:15,880:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:15,884:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:16,430:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:16,433:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:16,437:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:16,439:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:16,472:INFO:Calculating mean and std
2024-11-05 11:37:16,484:INFO:Creating metrics dataframe
2024-11-05 11:37:16,491:INFO:Uploading results into container
2024-11-05 11:37:16,493:INFO:Uploading model into container now
2024-11-05 11:37:16,495:INFO:_master_model_container: 12
2024-11-05 11:37:16,496:INFO:_display_container: 3
2024-11-05 11:37:16,496:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-05 11:37:16,496:INFO:create_model() successfully completed......................................
2024-11-05 11:37:16,657:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:16,657:INFO:Creating metrics dataframe
2024-11-05 11:37:16,686:INFO:Initializing Extra Trees Classifier
2024-11-05 11:37:16,687:INFO:Total runtime is 0.23105539083480833 minutes
2024-11-05 11:37:16,693:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:16,694:INFO:Initializing create_model()
2024-11-05 11:37:16,694:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:16,694:INFO:Checking exceptions
2024-11-05 11:37:16,694:INFO:Importing libraries
2024-11-05 11:37:16,694:INFO:Copying training dataset
2024-11-05 11:37:16,703:INFO:Defining folds
2024-11-05 11:37:16,703:INFO:Declaring metric variables
2024-11-05 11:37:16,720:INFO:Importing untrained model
2024-11-05 11:37:16,733:INFO:Extra Trees Classifier Imported successfully
2024-11-05 11:37:16,746:INFO:Starting cross validation
2024-11-05 11:37:16,753:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:18,486:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,496:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,497:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,498:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,502:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,504:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,512:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,515:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,604:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,618:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:18,622:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:18,630:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,077:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,081:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,084:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,102:INFO:Calculating mean and std
2024-11-05 11:37:19,105:INFO:Creating metrics dataframe
2024-11-05 11:37:19,109:INFO:Uploading results into container
2024-11-05 11:37:19,110:INFO:Uploading model into container now
2024-11-05 11:37:19,110:INFO:_master_model_container: 13
2024-11-05 11:37:19,110:INFO:_display_container: 3
2024-11-05 11:37:19,111:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8709, verbose=0,
                     warm_start=False)
2024-11-05 11:37:19,111:INFO:create_model() successfully completed......................................
2024-11-05 11:37:19,236:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:19,236:INFO:Creating metrics dataframe
2024-11-05 11:37:19,251:INFO:Initializing Light Gradient Boosting Machine
2024-11-05 11:37:19,252:INFO:Total runtime is 0.27381481726964313 minutes
2024-11-05 11:37:19,261:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:19,261:INFO:Initializing create_model()
2024-11-05 11:37:19,262:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:19,262:INFO:Checking exceptions
2024-11-05 11:37:19,262:INFO:Importing libraries
2024-11-05 11:37:19,262:INFO:Copying training dataset
2024-11-05 11:37:19,268:INFO:Defining folds
2024-11-05 11:37:19,268:INFO:Declaring metric variables
2024-11-05 11:37:19,278:INFO:Importing untrained model
2024-11-05 11:37:19,285:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-05 11:37:19,294:INFO:Starting cross validation
2024-11-05 11:37:19,300:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:19,865:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,868:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,870:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,876:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,878:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,878:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,900:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,905:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:19,912:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:20,235:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:20,243:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:20,250:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:20,283:INFO:Calculating mean and std
2024-11-05 11:37:20,286:INFO:Creating metrics dataframe
2024-11-05 11:37:20,293:INFO:Uploading results into container
2024-11-05 11:37:20,295:INFO:Uploading model into container now
2024-11-05 11:37:20,296:INFO:_master_model_container: 14
2024-11-05 11:37:20,296:INFO:_display_container: 3
2024-11-05 11:37:20,297:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8709, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-05 11:37:20,297:INFO:create_model() successfully completed......................................
2024-11-05 11:37:20,564:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:20,564:INFO:Creating metrics dataframe
2024-11-05 11:37:20,577:INFO:Initializing Dummy Classifier
2024-11-05 11:37:20,577:INFO:Total runtime is 0.2958992044130961 minutes
2024-11-05 11:37:20,581:INFO:SubProcess create_model() called ==================================
2024-11-05 11:37:20,582:INFO:Initializing create_model()
2024-11-05 11:37:20,582:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E300568B80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:20,582:INFO:Checking exceptions
2024-11-05 11:37:20,582:INFO:Importing libraries
2024-11-05 11:37:20,583:INFO:Copying training dataset
2024-11-05 11:37:20,589:INFO:Defining folds
2024-11-05 11:37:20,590:INFO:Declaring metric variables
2024-11-05 11:37:20,599:INFO:Importing untrained model
2024-11-05 11:37:20,604:INFO:Dummy Classifier Imported successfully
2024-11-05 11:37:20,617:INFO:Starting cross validation
2024-11-05 11:37:20,620:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:21,034:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,042:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,043:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,045:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:21,047:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,049:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,049:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,052:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:21,052:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,055:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:21,056:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,060:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,081:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,084:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,086:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:21,088:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,255:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,263:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,265:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:21,267:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:21,276:INFO:Calculating mean and std
2024-11-05 11:37:21,278:INFO:Creating metrics dataframe
2024-11-05 11:37:21,285:INFO:Uploading results into container
2024-11-05 11:37:21,287:INFO:Uploading model into container now
2024-11-05 11:37:21,288:INFO:_master_model_container: 15
2024-11-05 11:37:21,289:INFO:_display_container: 3
2024-11-05 11:37:21,289:INFO:DummyClassifier(constant=None, random_state=8709, strategy='prior')
2024-11-05 11:37:21,289:INFO:create_model() successfully completed......................................
2024-11-05 11:37:21,448:INFO:SubProcess create_model() end ==================================
2024-11-05 11:37:21,448:INFO:Creating metrics dataframe
2024-11-05 11:37:21,486:INFO:Initializing create_model()
2024-11-05 11:37:21,487:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:21,487:INFO:Checking exceptions
2024-11-05 11:37:21,490:INFO:Importing libraries
2024-11-05 11:37:21,491:INFO:Copying training dataset
2024-11-05 11:37:21,498:INFO:Defining folds
2024-11-05 11:37:21,498:INFO:Declaring metric variables
2024-11-05 11:37:21,498:INFO:Importing untrained model
2024-11-05 11:37:21,498:INFO:Declaring custom model
2024-11-05 11:37:21,499:INFO:K Neighbors Classifier Imported successfully
2024-11-05 11:37:21,500:INFO:Cross validation set to False
2024-11-05 11:37:21,500:INFO:Fitting Model
2024-11-05 11:37:21,660:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-05 11:37:21,660:INFO:create_model() successfully completed......................................
2024-11-05 11:37:21,787:INFO:Creating Dashboard logs
2024-11-05 11:37:21,796:INFO:Model: K Neighbors Classifier
2024-11-05 11:37:21,880:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2024-11-05 11:37:22,071:INFO:Initializing predict_model()
2024-11-05 11:37:22,071:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E37D2FB9A0>)
2024-11-05 11:37:22,071:INFO:Checking exceptions
2024-11-05 11:37:22,071:INFO:Preloading libraries
2024-11-05 11:37:23,246:INFO:Creating Dashboard logs
2024-11-05 11:37:23,250:INFO:Model: Random Forest Classifier
2024-11-05 11:37:23,303:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8709, 'verbose': 0, 'warm_start': False}
2024-11-05 11:37:23,711:INFO:Creating Dashboard logs
2024-11-05 11:37:23,718:INFO:Model: Dummy Classifier
2024-11-05 11:37:23,803:INFO:Logged params: {'constant': None, 'random_state': 8709, 'strategy': 'prior'}
2024-11-05 11:37:24,182:INFO:Creating Dashboard logs
2024-11-05 11:37:24,186:INFO:Model: Ridge Classifier
2024-11-05 11:37:24,250:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 8709, 'solver': 'auto', 'tol': 0.0001}
2024-11-05 11:37:24,616:INFO:Creating Dashboard logs
2024-11-05 11:37:24,620:INFO:Model: Extra Trees Classifier
2024-11-05 11:37:24,682:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8709, 'verbose': 0, 'warm_start': False}
2024-11-05 11:37:25,093:INFO:Creating Dashboard logs
2024-11-05 11:37:25,098:INFO:Model: Logistic Regression
2024-11-05 11:37:25,162:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 8709, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2024-11-05 11:37:25,549:INFO:Creating Dashboard logs
2024-11-05 11:37:25,554:INFO:Model: Linear Discriminant Analysis
2024-11-05 11:37:25,615:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2024-11-05 11:37:25,982:INFO:Creating Dashboard logs
2024-11-05 11:37:25,986:INFO:Model: Gradient Boosting Classifier
2024-11-05 11:37:26,058:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 8709, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2024-11-05 11:37:26,472:INFO:Creating Dashboard logs
2024-11-05 11:37:26,478:INFO:Model: Light Gradient Boosting Machine
2024-11-05 11:37:26,537:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 8709, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2024-11-05 11:37:26,949:INFO:Creating Dashboard logs
2024-11-05 11:37:26,954:INFO:Model: Ada Boost Classifier
2024-11-05 11:37:27,016:INFO:Logged params: {'algorithm': 'SAMME.R', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 8709}
2024-11-05 11:37:27,375:INFO:Creating Dashboard logs
2024-11-05 11:37:27,380:INFO:Model: Quadratic Discriminant Analysis
2024-11-05 11:37:27,440:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2024-11-05 11:37:27,801:INFO:Creating Dashboard logs
2024-11-05 11:37:27,807:INFO:Model: Decision Tree Classifier
2024-11-05 11:37:27,867:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 8709, 'splitter': 'best'}
2024-11-05 11:37:28,356:INFO:Creating Dashboard logs
2024-11-05 11:37:28,366:INFO:Model: SVM - Linear Kernel
2024-11-05 11:37:28,531:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 8709, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2024-11-05 11:37:28,998:INFO:Creating Dashboard logs
2024-11-05 11:37:29,004:INFO:Model: Naive Bayes
2024-11-05 11:37:29,092:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2024-11-05 11:37:29,475:INFO:_master_model_container: 15
2024-11-05 11:37:29,475:INFO:_display_container: 3
2024-11-05 11:37:29,477:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-05 11:37:29,477:INFO:compare_models() successfully completed......................................
2024-11-05 11:37:29,512:INFO:Initializing create_model()
2024-11-05 11:37:29,512:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=dummy, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:29,512:INFO:Checking exceptions
2024-11-05 11:37:29,566:INFO:Importing libraries
2024-11-05 11:37:29,566:INFO:Copying training dataset
2024-11-05 11:37:29,580:INFO:Defining folds
2024-11-05 11:37:29,580:INFO:Declaring metric variables
2024-11-05 11:37:29,595:INFO:Importing untrained model
2024-11-05 11:37:29,603:INFO:Dummy Classifier Imported successfully
2024-11-05 11:37:29,623:INFO:Starting cross validation
2024-11-05 11:37:29,628:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:30,119:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,127:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,130:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:30,133:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,144:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,145:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,150:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,151:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,153:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:30,155:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:30,159:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,161:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,167:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,174:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,177:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:30,179:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,350:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,352:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,355:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 11:37:30,357:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:30,374:INFO:Calculating mean and std
2024-11-05 11:37:30,375:INFO:Creating metrics dataframe
2024-11-05 11:37:30,385:INFO:Finalizing model
2024-11-05 11:37:30,527:INFO:Creating Dashboard logs
2024-11-05 11:37:30,532:INFO:Model: Dummy Classifier
2024-11-05 11:37:30,592:INFO:Logged params: {'constant': None, 'random_state': 8709, 'strategy': 'prior'}
2024-11-05 11:37:30,747:INFO:Initializing predict_model()
2024-11-05 11:37:30,747:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=DummyClassifier(constant=None, random_state=8709, strategy='prior'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E37D2FA950>)
2024-11-05 11:37:30,747:INFO:Checking exceptions
2024-11-05 11:37:30,747:INFO:Preloading libraries
2024-11-05 11:37:31,615:INFO:Uploading results into container
2024-11-05 11:37:31,616:INFO:Uploading model into container now
2024-11-05 11:37:31,634:INFO:_master_model_container: 16
2024-11-05 11:37:31,635:INFO:_display_container: 4
2024-11-05 11:37:31,635:INFO:DummyClassifier(constant=None, random_state=8709, strategy='prior')
2024-11-05 11:37:31,635:INFO:create_model() successfully completed......................................
2024-11-05 11:37:31,813:INFO:Initializing evaluate_model()
2024-11-05 11:37:31,813:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=DummyClassifier(constant=None, random_state=8709, strategy='prior'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-05 11:37:31,859:INFO:Initializing plot_model()
2024-11-05 11:37:31,860:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DummyClassifier(constant=None, random_state=8709, strategy='prior'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, system=True)
2024-11-05 11:37:31,860:INFO:Checking exceptions
2024-11-05 11:37:31,864:INFO:Preloading libraries
2024-11-05 11:37:31,865:INFO:Copying training dataset
2024-11-05 11:37:31,865:INFO:Plot type: pipeline
2024-11-05 11:37:32,222:INFO:Visual Rendered Successfully
2024-11-05 11:37:32,335:INFO:plot_model() successfully completed......................................
2024-11-05 11:37:32,373:INFO:Initializing create_model()
2024-11-05 11:37:32,373:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 11:37:32,374:INFO:Checking exceptions
2024-11-05 11:37:32,413:INFO:Importing libraries
2024-11-05 11:37:32,414:INFO:Copying training dataset
2024-11-05 11:37:32,428:INFO:Defining folds
2024-11-05 11:37:32,428:INFO:Declaring metric variables
2024-11-05 11:37:32,433:INFO:Importing untrained model
2024-11-05 11:37:32,439:INFO:Decision Tree Classifier Imported successfully
2024-11-05 11:37:32,451:INFO:Starting cross validation
2024-11-05 11:37:32,458:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 11:37:32,903:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,903:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,909:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,911:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,911:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,911:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,917:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,919:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,925:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,932:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,939:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:32,944:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:33,110:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:33,113:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:33,116:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 11:37:33,135:INFO:Calculating mean and std
2024-11-05 11:37:33,136:INFO:Creating metrics dataframe
2024-11-05 11:37:33,142:INFO:Finalizing model
2024-11-05 11:37:33,269:INFO:Creating Dashboard logs
2024-11-05 11:37:33,273:INFO:Model: Decision Tree Classifier
2024-11-05 11:37:33,330:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 8709, 'splitter': 'best'}
2024-11-05 11:37:33,678:INFO:Initializing predict_model()
2024-11-05 11:37:33,678:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8709, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E300DC2EF0>)
2024-11-05 11:37:33,678:INFO:Checking exceptions
2024-11-05 11:37:33,678:INFO:Preloading libraries
2024-11-05 11:37:34,276:INFO:Uploading results into container
2024-11-05 11:37:34,277:INFO:Uploading model into container now
2024-11-05 11:37:34,295:INFO:_master_model_container: 17
2024-11-05 11:37:34,296:INFO:_display_container: 5
2024-11-05 11:37:34,296:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8709, splitter='best')
2024-11-05 11:37:34,297:INFO:create_model() successfully completed......................................
2024-11-05 11:37:34,450:INFO:Initializing evaluate_model()
2024-11-05 11:37:34,450:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8709, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-05 11:37:34,479:INFO:Initializing plot_model()
2024-11-05 11:37:34,479:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8709, splitter='best'), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, system=True)
2024-11-05 11:37:34,480:INFO:Checking exceptions
2024-11-05 11:37:34,488:INFO:Preloading libraries
2024-11-05 11:37:34,489:INFO:Copying training dataset
2024-11-05 11:37:34,489:INFO:Plot type: pipeline
2024-11-05 11:37:34,784:INFO:Visual Rendered Successfully
2024-11-05 11:37:34,898:INFO:plot_model() successfully completed......................................
2024-11-05 11:37:34,933:INFO:Initializing predict_model()
2024-11-05 11:37:34,933:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8709, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E300DA9AB0>)
2024-11-05 11:37:34,934:INFO:Checking exceptions
2024-11-05 11:37:34,934:INFO:Preloading libraries
2024-11-05 11:37:34,940:INFO:Set up data.
2024-11-05 11:37:34,950:INFO:Set up index.
2024-11-05 11:37:35,373:INFO:Initializing save_model()
2024-11-05 11:37:35,374:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8709, verbose=0,
                       warm_start=False), model_name=model_rf, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-05 11:37:35,374:INFO:Adding model into prep_pipe
2024-11-05 11:37:35,473:INFO:model_rf.pkl saved in current working directory
2024-11-05 11:37:35,508:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_featur...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=8709, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-11-05 11:37:35,508:INFO:save_model() successfully completed......................................
2024-11-05 11:37:35,782:INFO:Initializing load_model()
2024-11-05 11:37:35,783:INFO:load_model(model_name=model_rf, platform=None, authentication=None, verbose=True)
2024-11-05 12:01:55,961:INFO:Initializing predict_model()
2024-11-05 12:01:55,961:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E374829DB0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=8709, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3787781F0>)
2024-11-05 12:01:55,961:INFO:Checking exceptions
2024-11-05 12:01:55,961:INFO:Preloading libraries
2024-11-05 12:01:55,961:INFO:Set up data.
2024-11-05 12:01:55,980:INFO:Set up index.
2024-11-05 12:39:13,609:INFO:PyCaret ClassificationExperiment
2024-11-05 12:39:13,609:INFO:Logging name: clf-default-name
2024-11-05 12:39:13,610:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-11-05 12:39:13,610:INFO:version 3.3.2
2024-11-05 12:39:13,610:INFO:Initializing setup()
2024-11-05 12:39:13,610:INFO:self.USI: 0f27
2024-11-05 12:39:13,610:INFO:self._variable_keys: {'target_param', 'exp_id', 'n_jobs_param', 'seed', 'exp_name_log', 'data', 'gpu_param', 'X_train', 'fix_imbalance', 'y_test', '_ml_usecase', 'y_train', 'y', 'pipeline', 'gpu_n_jobs_param', 'USI', '_available_plots', 'memory', 'log_plots_param', 'html_param', 'fold_generator', 'idx', 'X_test', 'X', 'logging_param', 'fold_shuffle_param', 'fold_groups_param', 'is_multiclass'}
2024-11-05 12:39:13,610:INFO:Checking environment
2024-11-05 12:39:13,610:INFO:python_version: 3.10.11
2024-11-05 12:39:13,610:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2024-11-05 12:39:13,610:INFO:machine: AMD64
2024-11-05 12:39:13,610:INFO:platform: Windows-10-10.0.19045-SP0
2024-11-05 12:39:13,613:INFO:Memory: svmem(total=12716195840, available=3497365504, percent=72.5, used=9218830336, free=3497365504)
2024-11-05 12:39:13,613:INFO:Physical Core: 2
2024-11-05 12:39:13,613:INFO:Logical Core: 4
2024-11-05 12:39:13,613:INFO:Checking libraries
2024-11-05 12:39:13,613:INFO:System:
2024-11-05 12:39:13,613:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2024-11-05 12:39:13,614:INFO:executable: c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\python.exe
2024-11-05 12:39:13,614:INFO:   machine: Windows-10-10.0.19045-SP0
2024-11-05 12:39:13,614:INFO:PyCaret required dependencies:
2024-11-05 12:39:13,614:INFO:                 pip: 23.0.1
2024-11-05 12:39:13,614:INFO:          setuptools: 65.5.0
2024-11-05 12:39:13,614:INFO:             pycaret: 3.3.2
2024-11-05 12:39:13,614:INFO:             IPython: 8.29.0
2024-11-05 12:39:13,614:INFO:          ipywidgets: 8.1.5
2024-11-05 12:39:13,614:INFO:                tqdm: 4.66.6
2024-11-05 12:39:13,615:INFO:               numpy: 1.26.4
2024-11-05 12:39:13,615:INFO:              pandas: 2.1.4
2024-11-05 12:39:13,615:INFO:              jinja2: 3.1.4
2024-11-05 12:39:13,615:INFO:               scipy: 1.11.4
2024-11-05 12:39:13,615:INFO:              joblib: 1.3.2
2024-11-05 12:39:13,615:INFO:             sklearn: 1.4.2
2024-11-05 12:39:13,615:INFO:                pyod: 2.0.2
2024-11-05 12:39:13,615:INFO:            imblearn: 0.12.4
2024-11-05 12:39:13,616:INFO:   category_encoders: 2.6.4
2024-11-05 12:39:13,616:INFO:            lightgbm: 4.5.0
2024-11-05 12:39:13,616:INFO:               numba: 0.60.0
2024-11-05 12:39:13,616:INFO:            requests: 2.32.3
2024-11-05 12:39:13,616:INFO:          matplotlib: 3.7.5
2024-11-05 12:39:13,616:INFO:          scikitplot: 0.3.7
2024-11-05 12:39:13,617:INFO:         yellowbrick: 1.5
2024-11-05 12:39:13,617:INFO:              plotly: 5.24.1
2024-11-05 12:39:13,617:INFO:    plotly-resampler: Not installed
2024-11-05 12:39:13,617:INFO:             kaleido: 0.2.1
2024-11-05 12:39:13,617:INFO:           schemdraw: 0.15
2024-11-05 12:39:13,617:INFO:         statsmodels: 0.14.4
2024-11-05 12:39:13,617:INFO:              sktime: 0.26.0
2024-11-05 12:39:13,617:INFO:               tbats: 1.1.3
2024-11-05 12:39:13,617:INFO:            pmdarima: 2.0.4
2024-11-05 12:39:13,618:INFO:              psutil: 6.1.0
2024-11-05 12:39:13,618:INFO:          markupsafe: 3.0.2
2024-11-05 12:39:13,618:INFO:             pickle5: Not installed
2024-11-05 12:39:13,618:INFO:         cloudpickle: 3.1.0
2024-11-05 12:39:13,618:INFO:         deprecation: 2.1.0
2024-11-05 12:39:13,618:INFO:              xxhash: 3.5.0
2024-11-05 12:39:13,618:INFO:           wurlitzer: Not installed
2024-11-05 12:39:13,618:INFO:PyCaret optional dependencies:
2024-11-05 12:39:13,618:INFO:                shap: Not installed
2024-11-05 12:39:13,618:INFO:           interpret: Not installed
2024-11-05 12:39:13,619:INFO:                umap: Not installed
2024-11-05 12:39:13,619:INFO:     ydata_profiling: 4.12.0
2024-11-05 12:39:13,619:INFO:  explainerdashboard: Not installed
2024-11-05 12:39:13,619:INFO:             autoviz: Not installed
2024-11-05 12:39:13,619:INFO:           fairlearn: Not installed
2024-11-05 12:39:13,619:INFO:          deepchecks: Not installed
2024-11-05 12:39:13,619:INFO:             xgboost: Not installed
2024-11-05 12:39:13,619:INFO:            catboost: Not installed
2024-11-05 12:39:13,619:INFO:              kmodes: Not installed
2024-11-05 12:39:13,619:INFO:             mlxtend: Not installed
2024-11-05 12:39:13,619:INFO:       statsforecast: Not installed
2024-11-05 12:39:13,619:INFO:        tune_sklearn: Not installed
2024-11-05 12:39:13,620:INFO:                 ray: Not installed
2024-11-05 12:39:13,620:INFO:            hyperopt: Not installed
2024-11-05 12:39:13,620:INFO:              optuna: Not installed
2024-11-05 12:39:13,620:INFO:               skopt: Not installed
2024-11-05 12:39:13,620:INFO:              mlflow: 2.17.2
2024-11-05 12:39:13,620:INFO:              gradio: Not installed
2024-11-05 12:39:13,620:INFO:             fastapi: Not installed
2024-11-05 12:39:13,620:INFO:             uvicorn: Not installed
2024-11-05 12:39:13,620:INFO:              m2cgen: Not installed
2024-11-05 12:39:13,620:INFO:           evidently: Not installed
2024-11-05 12:39:13,620:INFO:               fugue: Not installed
2024-11-05 12:39:13,621:INFO:           streamlit: Not installed
2024-11-05 12:39:13,621:INFO:             prophet: Not installed
2024-11-05 12:39:13,621:INFO:None
2024-11-05 12:39:13,621:INFO:Set up data.
2024-11-05 12:39:13,634:INFO:Set up folding strategy.
2024-11-05 12:39:13,634:INFO:Set up train/test split.
2024-11-05 12:39:13,645:INFO:Set up index.
2024-11-05 12:39:13,646:INFO:Assigning column types.
2024-11-05 12:39:13,653:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-11-05 12:39:13,731:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-05 12:39:13,733:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 12:39:13,767:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:13,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:13,843:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-11-05 12:39:13,844:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 12:39:13,888:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:13,889:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:13,889:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-11-05 12:39:13,968:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 12:39:13,999:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,000:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,047:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-11-05 12:39:14,081:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,082:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-11-05 12:39:14,168:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,168:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,248:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:14,249:INFO:Preparing preprocessing pipeline...
2024-11-05 12:39:14,250:INFO:Set up label encoding.
2024-11-05 12:39:14,250:INFO:Set up simple imputation.
2024-11-05 12:39:14,253:INFO:Set up encoding of ordinal features.
2024-11-05 12:39:14,257:INFO:Set up encoding of categorical features.
2024-11-05 12:39:14,257:INFO:Set up removing multicollinearity.
2024-11-05 12:39:14,258:INFO:Set up column transformation.
2024-11-05 12:39:14,258:INFO:Set up feature normalization.
2024-11-05 12:39:14,258:INFO:Set up column name cleaning.
2024-11-05 12:39:14,516:INFO:Finished creating preprocessing pipeline.
2024-11-05 12:39:14,548:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-05 12:39:14,548:INFO:Creating final display dataframe.
2024-11-05 12:39:14,988:INFO:Setup _display_container:                     Description              Value
0                    Session id               8034
1                        Target     Patient_Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape          (510, 11)
5        Transformed data shape          (510, 18)
6   Transformed train set shape          (357, 18)
7    Transformed test set shape          (153, 18)
8              Numeric features                  5
9          Categorical features                  5
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation             median
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16     Remove multicollinearity               True
17  Multicollinearity threshold                0.9
18               Transformation               True
19        Transformation method        yeo-johnson
20                    Normalize               True
21             Normalize method             zscore
22               Fold Generator    StratifiedKFold
23                  Fold Number                  5
24                     CPU Jobs                 -1
25                      Use GPU              False
26               Log Experiment       MlflowLogger
27              Experiment Name   clf-default-name
28                          USI               0f27
2024-11-05 12:39:15,117:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:15,117:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:15,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:15,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-11-05 12:39:15,201:INFO:Logging experiment in loggers
2024-11-05 12:39:15,306:INFO:SubProcess save_model() called ==================================
2024-11-05 12:39:15,370:INFO:Initializing save_model()
2024-11-05 12:39:15,370:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\SHAHRIAR\AppData\Local\Temp\tmp3ub40tc0\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-05 12:39:15,370:INFO:Adding model into prep_pipe
2024-11-05 12:39:15,370:WARNING:Only Model saved as it was a pipeline.
2024-11-05 12:39:15,381:INFO:C:\Users\SHAHRIAR\AppData\Local\Temp\tmp3ub40tc0\Transformation Pipeline.pkl saved in current working directory
2024-11-05 12:39:15,414:INFO:Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-11-05 12:39:15,414:INFO:save_model() successfully completed......................................
2024-11-05 12:39:15,544:INFO:SubProcess save_model() end ==================================
2024-11-05 12:39:15,619:INFO:setup() successfully completed in 1.6s...............
2024-11-05 12:40:17,886:INFO:Initializing create_model()
2024-11-05 12:40:17,886:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:40:17,887:INFO:Checking exceptions
2024-11-05 12:40:17,916:INFO:Importing libraries
2024-11-05 12:40:17,917:INFO:Copying training dataset
2024-11-05 12:40:17,932:INFO:Defining folds
2024-11-05 12:40:17,932:INFO:Declaring metric variables
2024-11-05 12:40:17,944:INFO:Importing untrained model
2024-11-05 12:40:17,953:INFO:Random Forest Classifier Imported successfully
2024-11-05 12:40:17,979:INFO:Starting cross validation
2024-11-05 12:40:17,983:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:40:26,190:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,196:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,211:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,216:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,225:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,232:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,517:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,525:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,531:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,822:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,829:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:26,847:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:27,654:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:27,660:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:27,666:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:40:27,700:INFO:Calculating mean and std
2024-11-05 12:40:27,705:INFO:Creating metrics dataframe
2024-11-05 12:40:27,721:INFO:Finalizing model
2024-11-05 12:40:28,317:INFO:Creating Dashboard logs
2024-11-05 12:40:28,322:INFO:Model: Random Forest Classifier
2024-11-05 12:40:28,381:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8034, 'verbose': 0, 'warm_start': False}
2024-11-05 12:40:28,571:INFO:Initializing predict_model()
2024-11-05 12:40:28,571:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8034, verbose=0,
                       warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E37D2F8DC0>)
2024-11-05 12:40:28,571:INFO:Checking exceptions
2024-11-05 12:40:28,571:INFO:Preloading libraries
2024-11-05 12:40:29,480:INFO:Uploading results into container
2024-11-05 12:40:29,481:INFO:Uploading model into container now
2024-11-05 12:40:29,506:INFO:_master_model_container: 1
2024-11-05 12:40:29,507:INFO:_display_container: 2
2024-11-05 12:40:29,508:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8034, verbose=0,
                       warm_start=False)
2024-11-05 12:40:29,508:INFO:create_model() successfully completed......................................
2024-11-05 12:41:43,734:INFO:Initializing compare_models()
2024-11-05 12:41:43,734:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-11-05 12:41:43,734:INFO:Checking exceptions
2024-11-05 12:41:43,744:INFO:Preparing display monitor
2024-11-05 12:41:43,798:INFO:Initializing Logistic Regression
2024-11-05 12:41:43,799:INFO:Total runtime is 1.660585403442383e-05 minutes
2024-11-05 12:41:43,811:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:43,816:INFO:Initializing create_model()
2024-11-05 12:41:43,816:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=lr, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:43,817:INFO:Checking exceptions
2024-11-05 12:41:43,817:INFO:Importing libraries
2024-11-05 12:41:43,817:INFO:Copying training dataset
2024-11-05 12:41:43,828:INFO:Defining folds
2024-11-05 12:41:43,829:INFO:Declaring metric variables
2024-11-05 12:41:43,835:INFO:Importing untrained model
2024-11-05 12:41:43,844:INFO:Logistic Regression Imported successfully
2024-11-05 12:41:43,879:INFO:Starting cross validation
2024-11-05 12:41:43,886:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:44,358:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,365:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,370:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,379:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,380:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,385:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,386:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,393:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,394:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,400:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,406:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,412:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,571:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,574:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,576:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:44,587:INFO:Calculating mean and std
2024-11-05 12:41:44,588:INFO:Creating metrics dataframe
2024-11-05 12:41:44,589:INFO:Uploading results into container
2024-11-05 12:41:44,590:INFO:Uploading model into container now
2024-11-05 12:41:44,590:INFO:_master_model_container: 2
2024-11-05 12:41:44,590:INFO:_display_container: 3
2024-11-05 12:41:44,591:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8034, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-11-05 12:41:44,591:INFO:create_model() successfully completed......................................
2024-11-05 12:41:44,708:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:44,708:INFO:Creating metrics dataframe
2024-11-05 12:41:44,718:INFO:Initializing K Neighbors Classifier
2024-11-05 12:41:44,719:INFO:Total runtime is 0.015361360708872477 minutes
2024-11-05 12:41:44,724:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:44,724:INFO:Initializing create_model()
2024-11-05 12:41:44,724:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=knn, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:44,724:INFO:Checking exceptions
2024-11-05 12:41:44,724:INFO:Importing libraries
2024-11-05 12:41:44,724:INFO:Copying training dataset
2024-11-05 12:41:44,730:INFO:Defining folds
2024-11-05 12:41:44,730:INFO:Declaring metric variables
2024-11-05 12:41:44,736:INFO:Importing untrained model
2024-11-05 12:41:44,739:INFO:K Neighbors Classifier Imported successfully
2024-11-05 12:41:44,754:INFO:Starting cross validation
2024-11-05 12:41:44,761:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:45,576:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,605:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,619:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,621:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,641:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,660:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,664:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,678:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,688:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,688:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,705:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:45,711:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:46,670:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:46,677:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:46,686:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:46,751:INFO:Calculating mean and std
2024-11-05 12:41:46,753:INFO:Creating metrics dataframe
2024-11-05 12:41:46,759:INFO:Uploading results into container
2024-11-05 12:41:46,762:INFO:Uploading model into container now
2024-11-05 12:41:46,764:INFO:_master_model_container: 3
2024-11-05 12:41:46,764:INFO:_display_container: 3
2024-11-05 12:41:46,766:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-11-05 12:41:46,767:INFO:create_model() successfully completed......................................
2024-11-05 12:41:47,018:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:47,018:INFO:Creating metrics dataframe
2024-11-05 12:41:47,027:INFO:Initializing Naive Bayes
2024-11-05 12:41:47,027:INFO:Total runtime is 0.053826868534088135 minutes
2024-11-05 12:41:47,035:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:47,035:INFO:Initializing create_model()
2024-11-05 12:41:47,036:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=nb, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:47,036:INFO:Checking exceptions
2024-11-05 12:41:47,036:INFO:Importing libraries
2024-11-05 12:41:47,036:INFO:Copying training dataset
2024-11-05 12:41:47,044:INFO:Defining folds
2024-11-05 12:41:47,044:INFO:Declaring metric variables
2024-11-05 12:41:47,054:INFO:Importing untrained model
2024-11-05 12:41:47,058:INFO:Naive Bayes Imported successfully
2024-11-05 12:41:47,089:INFO:Starting cross validation
2024-11-05 12:41:47,096:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:47,550:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,554:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,554:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,564:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,568:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,568:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,573:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,575:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,586:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,610:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,618:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,625:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,861:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,867:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,870:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:47,877:INFO:Calculating mean and std
2024-11-05 12:41:47,883:INFO:Creating metrics dataframe
2024-11-05 12:41:47,887:INFO:Uploading results into container
2024-11-05 12:41:47,887:INFO:Uploading model into container now
2024-11-05 12:41:47,888:INFO:_master_model_container: 4
2024-11-05 12:41:47,889:INFO:_display_container: 3
2024-11-05 12:41:47,890:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-11-05 12:41:47,890:INFO:create_model() successfully completed......................................
2024-11-05 12:41:48,034:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:48,035:INFO:Creating metrics dataframe
2024-11-05 12:41:48,044:INFO:Initializing Decision Tree Classifier
2024-11-05 12:41:48,044:INFO:Total runtime is 0.07077889442443848 minutes
2024-11-05 12:41:48,051:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:48,051:INFO:Initializing create_model()
2024-11-05 12:41:48,051:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=dt, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:48,051:INFO:Checking exceptions
2024-11-05 12:41:48,051:INFO:Importing libraries
2024-11-05 12:41:48,051:INFO:Copying training dataset
2024-11-05 12:41:48,058:INFO:Defining folds
2024-11-05 12:41:48,058:INFO:Declaring metric variables
2024-11-05 12:41:48,070:INFO:Importing untrained model
2024-11-05 12:41:48,076:INFO:Decision Tree Classifier Imported successfully
2024-11-05 12:41:48,139:INFO:Starting cross validation
2024-11-05 12:41:48,199:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:48,619:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,627:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,637:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,637:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,642:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,643:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,651:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,651:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,652:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,657:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,659:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,668:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,872:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,875:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,878:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:48,887:INFO:Calculating mean and std
2024-11-05 12:41:48,888:INFO:Creating metrics dataframe
2024-11-05 12:41:48,890:INFO:Uploading results into container
2024-11-05 12:41:48,890:INFO:Uploading model into container now
2024-11-05 12:41:48,891:INFO:_master_model_container: 5
2024-11-05 12:41:48,891:INFO:_display_container: 3
2024-11-05 12:41:48,891:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8034, splitter='best')
2024-11-05 12:41:48,891:INFO:create_model() successfully completed......................................
2024-11-05 12:41:49,038:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:49,039:INFO:Creating metrics dataframe
2024-11-05 12:41:49,054:INFO:Initializing SVM - Linear Kernel
2024-11-05 12:41:49,054:INFO:Total runtime is 0.08760767380396525 minutes
2024-11-05 12:41:49,058:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:49,059:INFO:Initializing create_model()
2024-11-05 12:41:49,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=svm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:49,060:INFO:Checking exceptions
2024-11-05 12:41:49,060:INFO:Importing libraries
2024-11-05 12:41:49,060:INFO:Copying training dataset
2024-11-05 12:41:49,069:INFO:Defining folds
2024-11-05 12:41:49,069:INFO:Declaring metric variables
2024-11-05 12:41:49,072:INFO:Importing untrained model
2024-11-05 12:41:49,085:INFO:SVM - Linear Kernel Imported successfully
2024-11-05 12:41:49,096:INFO:Starting cross validation
2024-11-05 12:41:49,104:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:49,549:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,555:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,556:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,561:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,570:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,572:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,577:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,590:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,599:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,606:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,941:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,950:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,956:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:49,973:INFO:Calculating mean and std
2024-11-05 12:41:49,975:INFO:Creating metrics dataframe
2024-11-05 12:41:49,985:INFO:Uploading results into container
2024-11-05 12:41:49,989:INFO:Uploading model into container now
2024-11-05 12:41:49,989:INFO:_master_model_container: 6
2024-11-05 12:41:49,990:INFO:_display_container: 3
2024-11-05 12:41:49,991:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8034, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-11-05 12:41:49,991:INFO:create_model() successfully completed......................................
2024-11-05 12:41:50,251:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:50,251:INFO:Creating metrics dataframe
2024-11-05 12:41:50,276:INFO:Initializing Ridge Classifier
2024-11-05 12:41:50,277:INFO:Total runtime is 0.10798490047454834 minutes
2024-11-05 12:41:50,289:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:50,290:INFO:Initializing create_model()
2024-11-05 12:41:50,290:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ridge, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:50,290:INFO:Checking exceptions
2024-11-05 12:41:50,290:INFO:Importing libraries
2024-11-05 12:41:50,290:INFO:Copying training dataset
2024-11-05 12:41:50,314:INFO:Defining folds
2024-11-05 12:41:50,316:INFO:Declaring metric variables
2024-11-05 12:41:50,338:INFO:Importing untrained model
2024-11-05 12:41:50,410:INFO:Ridge Classifier Imported successfully
2024-11-05 12:41:50,438:INFO:Starting cross validation
2024-11-05 12:41:50,443:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:50,925:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,938:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,943:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,954:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,956:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,958:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,960:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,965:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,967:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,968:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,971:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:50,972:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:51,256:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:51,259:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:51,266:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:51,287:INFO:Calculating mean and std
2024-11-05 12:41:51,291:INFO:Creating metrics dataframe
2024-11-05 12:41:51,300:INFO:Uploading results into container
2024-11-05 12:41:51,301:INFO:Uploading model into container now
2024-11-05 12:41:51,303:INFO:_master_model_container: 7
2024-11-05 12:41:51,304:INFO:_display_container: 3
2024-11-05 12:41:51,305:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8034, solver='auto',
                tol=0.0001)
2024-11-05 12:41:51,310:INFO:create_model() successfully completed......................................
2024-11-05 12:41:51,493:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:51,493:INFO:Creating metrics dataframe
2024-11-05 12:41:51,510:INFO:Initializing Random Forest Classifier
2024-11-05 12:41:51,510:INFO:Total runtime is 0.1285413424173991 minutes
2024-11-05 12:41:51,521:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:51,522:INFO:Initializing create_model()
2024-11-05 12:41:51,522:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=rf, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:51,522:INFO:Checking exceptions
2024-11-05 12:41:51,522:INFO:Importing libraries
2024-11-05 12:41:51,522:INFO:Copying training dataset
2024-11-05 12:41:51,540:INFO:Defining folds
2024-11-05 12:41:51,540:INFO:Declaring metric variables
2024-11-05 12:41:51,552:INFO:Importing untrained model
2024-11-05 12:41:51,560:INFO:Random Forest Classifier Imported successfully
2024-11-05 12:41:51,578:INFO:Starting cross validation
2024-11-05 12:41:51,584:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:53,008:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,008:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,019:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,020:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,026:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,026:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,040:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,049:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,055:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,116:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,121:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,127:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,807:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,810:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,819:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:53,832:INFO:Calculating mean and std
2024-11-05 12:41:53,836:INFO:Creating metrics dataframe
2024-11-05 12:41:53,841:INFO:Uploading results into container
2024-11-05 12:41:53,843:INFO:Uploading model into container now
2024-11-05 12:41:53,851:INFO:_master_model_container: 8
2024-11-05 12:41:53,852:INFO:_display_container: 3
2024-11-05 12:41:53,855:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8034, verbose=0,
                       warm_start=False)
2024-11-05 12:41:53,856:INFO:create_model() successfully completed......................................
2024-11-05 12:41:54,014:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:54,014:INFO:Creating metrics dataframe
2024-11-05 12:41:54,025:INFO:Initializing Quadratic Discriminant Analysis
2024-11-05 12:41:54,025:INFO:Total runtime is 0.1704591155052185 minutes
2024-11-05 12:41:54,033:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:54,034:INFO:Initializing create_model()
2024-11-05 12:41:54,034:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=qda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:54,034:INFO:Checking exceptions
2024-11-05 12:41:54,034:INFO:Importing libraries
2024-11-05 12:41:54,035:INFO:Copying training dataset
2024-11-05 12:41:54,040:INFO:Defining folds
2024-11-05 12:41:54,040:INFO:Declaring metric variables
2024-11-05 12:41:54,053:INFO:Importing untrained model
2024-11-05 12:41:54,058:INFO:Quadratic Discriminant Analysis Imported successfully
2024-11-05 12:41:54,092:INFO:Starting cross validation
2024-11-05 12:41:54,100:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:54,476:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 12:41:54,495:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 12:41:54,502:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 12:41:54,515:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 12:41:54,601:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,612:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,620:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,631:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,637:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,638:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,646:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,648:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,655:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,670:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,679:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,687:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:54,927:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-11-05 12:41:55,040:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:55,048:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:55,055:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:55,075:INFO:Calculating mean and std
2024-11-05 12:41:55,080:INFO:Creating metrics dataframe
2024-11-05 12:41:55,087:INFO:Uploading results into container
2024-11-05 12:41:55,088:INFO:Uploading model into container now
2024-11-05 12:41:55,089:INFO:_master_model_container: 9
2024-11-05 12:41:55,089:INFO:_display_container: 3
2024-11-05 12:41:55,089:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-11-05 12:41:55,090:INFO:create_model() successfully completed......................................
2024-11-05 12:41:55,380:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:55,380:INFO:Creating metrics dataframe
2024-11-05 12:41:55,459:INFO:Initializing Ada Boost Classifier
2024-11-05 12:41:55,459:INFO:Total runtime is 0.19436288674672444 minutes
2024-11-05 12:41:55,471:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:55,472:INFO:Initializing create_model()
2024-11-05 12:41:55,472:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ada, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:55,472:INFO:Checking exceptions
2024-11-05 12:41:55,473:INFO:Importing libraries
2024-11-05 12:41:55,473:INFO:Copying training dataset
2024-11-05 12:41:55,487:INFO:Defining folds
2024-11-05 12:41:55,487:INFO:Declaring metric variables
2024-11-05 12:41:55,497:INFO:Importing untrained model
2024-11-05 12:41:55,509:INFO:Ada Boost Classifier Imported successfully
2024-11-05 12:41:55,535:INFO:Starting cross validation
2024-11-05 12:41:55,541:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:55,850:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 12:41:55,852:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 12:41:55,861:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 12:41:55,882:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 12:41:56,205:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,207:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,213:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,216:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,217:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,219:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,222:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,223:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,231:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,232:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,239:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,249:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,468:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-11-05 12:41:56,784:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,792:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,802:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:56,813:INFO:Calculating mean and std
2024-11-05 12:41:56,814:INFO:Creating metrics dataframe
2024-11-05 12:41:56,819:INFO:Uploading results into container
2024-11-05 12:41:56,820:INFO:Uploading model into container now
2024-11-05 12:41:56,822:INFO:_master_model_container: 10
2024-11-05 12:41:56,822:INFO:_display_container: 3
2024-11-05 12:41:56,822:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=8034)
2024-11-05 12:41:56,822:INFO:create_model() successfully completed......................................
2024-11-05 12:41:56,952:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:56,952:INFO:Creating metrics dataframe
2024-11-05 12:41:56,965:INFO:Initializing Gradient Boosting Classifier
2024-11-05 12:41:56,965:INFO:Total runtime is 0.21946358680725098 minutes
2024-11-05 12:41:56,970:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:56,970:INFO:Initializing create_model()
2024-11-05 12:41:56,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=gbc, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:56,971:INFO:Checking exceptions
2024-11-05 12:41:56,971:INFO:Importing libraries
2024-11-05 12:41:56,971:INFO:Copying training dataset
2024-11-05 12:41:56,979:INFO:Defining folds
2024-11-05 12:41:56,979:INFO:Declaring metric variables
2024-11-05 12:41:56,987:INFO:Importing untrained model
2024-11-05 12:41:56,992:INFO:Gradient Boosting Classifier Imported successfully
2024-11-05 12:41:57,007:INFO:Starting cross validation
2024-11-05 12:41:57,016:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:57,739:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,740:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,747:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,749:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,753:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,755:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,783:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,788:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,789:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,792:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,796:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:57,800:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:58,403:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:58,406:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:58,413:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:58,428:INFO:Calculating mean and std
2024-11-05 12:41:58,431:INFO:Creating metrics dataframe
2024-11-05 12:41:58,433:INFO:Uploading results into container
2024-11-05 12:41:58,434:INFO:Uploading model into container now
2024-11-05 12:41:58,435:INFO:_master_model_container: 11
2024-11-05 12:41:58,435:INFO:_display_container: 3
2024-11-05 12:41:58,437:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8034, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-11-05 12:41:58,437:INFO:create_model() successfully completed......................................
2024-11-05 12:41:58,585:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:58,586:INFO:Creating metrics dataframe
2024-11-05 12:41:58,601:INFO:Initializing Linear Discriminant Analysis
2024-11-05 12:41:58,602:INFO:Total runtime is 0.24674535989761354 minutes
2024-11-05 12:41:58,608:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:58,608:INFO:Initializing create_model()
2024-11-05 12:41:58,608:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=lda, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:58,609:INFO:Checking exceptions
2024-11-05 12:41:58,609:INFO:Importing libraries
2024-11-05 12:41:58,612:INFO:Copying training dataset
2024-11-05 12:41:58,621:INFO:Defining folds
2024-11-05 12:41:58,622:INFO:Declaring metric variables
2024-11-05 12:41:58,627:INFO:Importing untrained model
2024-11-05 12:41:58,635:INFO:Linear Discriminant Analysis Imported successfully
2024-11-05 12:41:58,659:INFO:Starting cross validation
2024-11-05 12:41:58,664:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:41:59,101:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,104:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,107:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,111:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,113:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,117:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,119:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,123:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,149:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,155:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,161:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,332:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,335:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,338:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:41:59,347:INFO:Calculating mean and std
2024-11-05 12:41:59,348:INFO:Creating metrics dataframe
2024-11-05 12:41:59,350:INFO:Uploading results into container
2024-11-05 12:41:59,350:INFO:Uploading model into container now
2024-11-05 12:41:59,351:INFO:_master_model_container: 12
2024-11-05 12:41:59,351:INFO:_display_container: 3
2024-11-05 12:41:59,351:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-11-05 12:41:59,351:INFO:create_model() successfully completed......................................
2024-11-05 12:41:59,483:INFO:SubProcess create_model() end ==================================
2024-11-05 12:41:59,484:INFO:Creating metrics dataframe
2024-11-05 12:41:59,502:INFO:Initializing Extra Trees Classifier
2024-11-05 12:41:59,502:INFO:Total runtime is 0.2617387056350708 minutes
2024-11-05 12:41:59,507:INFO:SubProcess create_model() called ==================================
2024-11-05 12:41:59,507:INFO:Initializing create_model()
2024-11-05 12:41:59,507:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=et, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:41:59,507:INFO:Checking exceptions
2024-11-05 12:41:59,507:INFO:Importing libraries
2024-11-05 12:41:59,508:INFO:Copying training dataset
2024-11-05 12:41:59,520:INFO:Defining folds
2024-11-05 12:41:59,520:INFO:Declaring metric variables
2024-11-05 12:41:59,527:INFO:Importing untrained model
2024-11-05 12:41:59,536:INFO:Extra Trees Classifier Imported successfully
2024-11-05 12:41:59,558:INFO:Starting cross validation
2024-11-05 12:41:59,569:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:42:00,370:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,370:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,378:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,378:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,385:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,385:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,403:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,409:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,417:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,539:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,548:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:00,554:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:01,319:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:01,326:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:01,334:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:01,360:INFO:Calculating mean and std
2024-11-05 12:42:01,363:INFO:Creating metrics dataframe
2024-11-05 12:42:01,369:INFO:Uploading results into container
2024-11-05 12:42:01,371:INFO:Uploading model into container now
2024-11-05 12:42:01,372:INFO:_master_model_container: 13
2024-11-05 12:42:01,372:INFO:_display_container: 3
2024-11-05 12:42:01,373:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False)
2024-11-05 12:42:01,373:INFO:create_model() successfully completed......................................
2024-11-05 12:42:01,573:INFO:SubProcess create_model() end ==================================
2024-11-05 12:42:01,573:INFO:Creating metrics dataframe
2024-11-05 12:42:01,589:INFO:Initializing Light Gradient Boosting Machine
2024-11-05 12:42:01,589:INFO:Total runtime is 0.2965250015258789 minutes
2024-11-05 12:42:01,597:INFO:SubProcess create_model() called ==================================
2024-11-05 12:42:01,597:INFO:Initializing create_model()
2024-11-05 12:42:01,598:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:42:01,598:INFO:Checking exceptions
2024-11-05 12:42:01,598:INFO:Importing libraries
2024-11-05 12:42:01,598:INFO:Copying training dataset
2024-11-05 12:42:01,604:INFO:Defining folds
2024-11-05 12:42:01,604:INFO:Declaring metric variables
2024-11-05 12:42:01,621:INFO:Importing untrained model
2024-11-05 12:42:01,629:INFO:Light Gradient Boosting Machine Imported successfully
2024-11-05 12:42:01,695:INFO:Starting cross validation
2024-11-05 12:42:01,700:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:42:02,374:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,375:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,382:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,385:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,388:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,393:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,420:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,429:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,434:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,551:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,565:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:02,572:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:03,578:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:03,586:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:03,595:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:03,606:INFO:Calculating mean and std
2024-11-05 12:42:03,613:INFO:Creating metrics dataframe
2024-11-05 12:42:03,623:INFO:Uploading results into container
2024-11-05 12:42:03,624:INFO:Uploading model into container now
2024-11-05 12:42:03,628:INFO:_master_model_container: 14
2024-11-05 12:42:03,628:INFO:_display_container: 3
2024-11-05 12:42:03,629:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8034, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-11-05 12:42:03,629:INFO:create_model() successfully completed......................................
2024-11-05 12:42:03,812:INFO:SubProcess create_model() end ==================================
2024-11-05 12:42:03,812:INFO:Creating metrics dataframe
2024-11-05 12:42:03,830:INFO:Initializing Dummy Classifier
2024-11-05 12:42:03,830:INFO:Total runtime is 0.3338728626569112 minutes
2024-11-05 12:42:03,836:INFO:SubProcess create_model() called ==================================
2024-11-05 12:42:03,836:INFO:Initializing create_model()
2024-11-05 12:42:03,836:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=dummy, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E30026F730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:42:03,836:INFO:Checking exceptions
2024-11-05 12:42:03,837:INFO:Importing libraries
2024-11-05 12:42:03,837:INFO:Copying training dataset
2024-11-05 12:42:03,846:INFO:Defining folds
2024-11-05 12:42:03,846:INFO:Declaring metric variables
2024-11-05 12:42:03,855:INFO:Importing untrained model
2024-11-05 12:42:03,863:INFO:Dummy Classifier Imported successfully
2024-11-05 12:42:03,890:INFO:Starting cross validation
2024-11-05 12:42:03,899:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:42:04,337:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,340:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,350:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,354:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 12:42:04,356:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,361:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 12:42:04,363:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,365:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,373:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,382:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,384:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,386:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 12:42:04,389:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,390:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,393:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 12:42:04,397:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,639:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,646:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,648:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-11-05 12:42:04,649:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:04,669:INFO:Calculating mean and std
2024-11-05 12:42:04,672:INFO:Creating metrics dataframe
2024-11-05 12:42:04,697:INFO:Uploading results into container
2024-11-05 12:42:04,699:INFO:Uploading model into container now
2024-11-05 12:42:04,700:INFO:_master_model_container: 15
2024-11-05 12:42:04,701:INFO:_display_container: 3
2024-11-05 12:42:04,701:INFO:DummyClassifier(constant=None, random_state=8034, strategy='prior')
2024-11-05 12:42:04,701:INFO:create_model() successfully completed......................................
2024-11-05 12:42:04,845:INFO:SubProcess create_model() end ==================================
2024-11-05 12:42:04,845:INFO:Creating metrics dataframe
2024-11-05 12:42:04,887:INFO:Initializing create_model()
2024-11-05 12:42:04,888:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:42:04,889:INFO:Checking exceptions
2024-11-05 12:42:04,895:INFO:Importing libraries
2024-11-05 12:42:04,895:INFO:Copying training dataset
2024-11-05 12:42:04,900:INFO:Defining folds
2024-11-05 12:42:04,900:INFO:Declaring metric variables
2024-11-05 12:42:04,901:INFO:Importing untrained model
2024-11-05 12:42:04,901:INFO:Declaring custom model
2024-11-05 12:42:04,902:INFO:Extra Trees Classifier Imported successfully
2024-11-05 12:42:04,913:INFO:Cross validation set to False
2024-11-05 12:42:04,913:INFO:Fitting Model
2024-11-05 12:42:05,247:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False)
2024-11-05 12:42:05,247:INFO:create_model() successfully completed......................................
2024-11-05 12:42:05,400:INFO:Creating Dashboard logs
2024-11-05 12:42:05,407:INFO:Model: Extra Trees Classifier
2024-11-05 12:42:05,521:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8034, 'verbose': 0, 'warm_start': False}
2024-11-05 12:42:05,735:INFO:Initializing predict_model()
2024-11-05 12:42:05,736:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E37920BD90>)
2024-11-05 12:42:05,736:INFO:Checking exceptions
2024-11-05 12:42:05,736:INFO:Preloading libraries
2024-11-05 12:42:06,290:INFO:Creating Dashboard logs
2024-11-05 12:42:06,300:INFO:Model: Random Forest Classifier
2024-11-05 12:42:06,386:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8034, 'verbose': 0, 'warm_start': False}
2024-11-05 12:42:07,005:INFO:Creating Dashboard logs
2024-11-05 12:42:07,012:INFO:Model: Light Gradient Boosting Machine
2024-11-05 12:42:07,065:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 8034, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2024-11-05 12:42:07,815:INFO:Creating Dashboard logs
2024-11-05 12:42:07,833:INFO:Model: Gradient Boosting Classifier
2024-11-05 12:42:07,893:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 8034, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2024-11-05 12:42:08,331:INFO:Creating Dashboard logs
2024-11-05 12:42:08,342:INFO:Model: Decision Tree Classifier
2024-11-05 12:42:08,437:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 8034, 'splitter': 'best'}
2024-11-05 12:42:08,948:INFO:Creating Dashboard logs
2024-11-05 12:42:08,952:INFO:Model: Ada Boost Classifier
2024-11-05 12:42:09,004:INFO:Logged params: {'algorithm': 'SAMME.R', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 8034}
2024-11-05 12:42:09,393:INFO:Creating Dashboard logs
2024-11-05 12:42:09,398:INFO:Model: K Neighbors Classifier
2024-11-05 12:42:09,577:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2024-11-05 12:42:10,866:INFO:Creating Dashboard logs
2024-11-05 12:42:10,870:INFO:Model: Quadratic Discriminant Analysis
2024-11-05 12:42:10,951:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2024-11-05 12:42:11,345:INFO:Creating Dashboard logs
2024-11-05 12:42:11,350:INFO:Model: Logistic Regression
2024-11-05 12:42:11,409:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 8034, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2024-11-05 12:42:11,813:INFO:Creating Dashboard logs
2024-11-05 12:42:11,818:INFO:Model: Ridge Classifier
2024-11-05 12:42:11,879:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 8034, 'solver': 'auto', 'tol': 0.0001}
2024-11-05 12:42:12,278:INFO:Creating Dashboard logs
2024-11-05 12:42:12,283:INFO:Model: Linear Discriminant Analysis
2024-11-05 12:42:12,368:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2024-11-05 12:42:12,969:INFO:Creating Dashboard logs
2024-11-05 12:42:12,980:INFO:Model: Naive Bayes
2024-11-05 12:42:13,084:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2024-11-05 12:42:13,484:INFO:Creating Dashboard logs
2024-11-05 12:42:13,490:INFO:Model: SVM - Linear Kernel
2024-11-05 12:42:13,554:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 8034, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2024-11-05 12:42:14,051:INFO:Creating Dashboard logs
2024-11-05 12:42:14,058:INFO:Model: Dummy Classifier
2024-11-05 12:42:14,187:INFO:Logged params: {'constant': None, 'random_state': 8034, 'strategy': 'prior'}
2024-11-05 12:42:15,228:INFO:_master_model_container: 15
2024-11-05 12:42:15,228:INFO:_display_container: 3
2024-11-05 12:42:15,230:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False)
2024-11-05 12:42:15,231:INFO:compare_models() successfully completed......................................
2024-11-05 12:42:54,244:INFO:Initializing create_model()
2024-11-05 12:42:54,245:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=et, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-11-05 12:42:54,245:INFO:Checking exceptions
2024-11-05 12:42:54,277:INFO:Importing libraries
2024-11-05 12:42:54,277:INFO:Copying training dataset
2024-11-05 12:42:54,293:INFO:Defining folds
2024-11-05 12:42:54,293:INFO:Declaring metric variables
2024-11-05 12:42:54,304:INFO:Importing untrained model
2024-11-05 12:42:54,314:INFO:Extra Trees Classifier Imported successfully
2024-11-05 12:42:54,343:INFO:Starting cross validation
2024-11-05 12:42:54,352:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2024-11-05 12:42:55,085:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,091:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,098:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,150:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,152:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,156:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,157:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,162:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,166:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,191:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,195:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:55,200:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:56,250:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:56,257:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:56,266:WARNING:c:\Users\SHAHRIAR\AppData\Local\Programs\Python\Python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-11-05 12:42:56,288:INFO:Calculating mean and std
2024-11-05 12:42:56,291:INFO:Creating metrics dataframe
2024-11-05 12:42:56,307:INFO:Finalizing model
2024-11-05 12:42:57,163:INFO:Creating Dashboard logs
2024-11-05 12:42:57,171:INFO:Model: Extra Trees Classifier
2024-11-05 12:42:57,280:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 8034, 'verbose': 0, 'warm_start': False}
2024-11-05 12:42:57,521:INFO:Initializing predict_model()
2024-11-05 12:42:57,521:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E37D2F8550>)
2024-11-05 12:42:57,521:INFO:Checking exceptions
2024-11-05 12:42:57,521:INFO:Preloading libraries
2024-11-05 12:42:58,502:INFO:Uploading results into container
2024-11-05 12:42:58,504:INFO:Uploading model into container now
2024-11-05 12:42:58,556:INFO:_master_model_container: 16
2024-11-05 12:42:58,557:INFO:_display_container: 4
2024-11-05 12:42:58,558:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False)
2024-11-05 12:42:58,558:INFO:create_model() successfully completed......................................
2024-11-05 12:43:19,197:INFO:Initializing evaluate_model()
2024-11-05 12:43:19,197:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-11-05 12:43:19,219:INFO:Initializing plot_model()
2024-11-05 12:43:19,219:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, system=True)
2024-11-05 12:43:19,220:INFO:Checking exceptions
2024-11-05 12:43:19,268:INFO:Preloading libraries
2024-11-05 12:43:19,281:INFO:Copying training dataset
2024-11-05 12:43:19,281:INFO:Plot type: pipeline
2024-11-05 12:43:19,689:INFO:Visual Rendered Successfully
2024-11-05 12:43:19,865:INFO:plot_model() successfully completed......................................
2024-11-05 12:44:08,048:INFO:Initializing plot_model()
2024-11-05 12:44:08,048:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=5, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, system=True)
2024-11-05 12:44:08,048:INFO:Checking exceptions
2024-11-05 12:44:08,093:INFO:Preloading libraries
2024-11-05 12:44:08,117:INFO:Copying training dataset
2024-11-05 12:44:08,117:INFO:Plot type: confusion_matrix
2024-11-05 12:44:08,458:INFO:Fitting Model
2024-11-05 12:44:08,459:INFO:Scoring test/hold-out set
2024-11-05 12:44:08,721:INFO:Visual Rendered Successfully
2024-11-05 12:44:08,881:INFO:plot_model() successfully completed......................................
2024-11-05 12:45:05,619:INFO:Initializing plot_model()
2024-11-05 12:45:05,619:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, system=True)
2024-11-05 12:45:05,620:INFO:Checking exceptions
2024-11-05 12:45:05,656:INFO:Preloading libraries
2024-11-05 12:45:05,667:INFO:Copying training dataset
2024-11-05 12:45:05,667:INFO:Plot type: auc
2024-11-05 12:45:05,784:INFO:Fitting Model
2024-11-05 12:45:05,785:INFO:Scoring test/hold-out set
2024-11-05 12:45:06,164:INFO:Visual Rendered Successfully
2024-11-05 12:45:06,277:INFO:plot_model() successfully completed......................................
2024-11-05 12:45:54,390:INFO:Initializing plot_model()
2024-11-05 12:45:54,391:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, system=True)
2024-11-05 12:45:54,391:INFO:Checking exceptions
2024-11-05 12:45:54,452:INFO:Preloading libraries
2024-11-05 12:45:54,475:INFO:Copying training dataset
2024-11-05 12:45:54,475:INFO:Plot type: pr
2024-11-05 12:45:54,715:INFO:Fitting Model
2024-11-05 12:45:54,717:INFO:Scoring test/hold-out set
2024-11-05 12:45:55,084:INFO:Visual Rendered Successfully
2024-11-05 12:45:55,212:INFO:plot_model() successfully completed......................................
2024-11-05 12:46:25,315:INFO:Initializing plot_model()
2024-11-05 12:46:25,315:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, system=True)
2024-11-05 12:46:25,315:INFO:Checking exceptions
2024-11-05 12:46:25,377:INFO:Preloading libraries
2024-11-05 12:46:25,393:INFO:Copying training dataset
2024-11-05 12:46:25,393:INFO:Plot type: confusion_matrix
2024-11-05 12:46:25,570:INFO:Fitting Model
2024-11-05 12:46:25,570:INFO:Scoring test/hold-out set
2024-11-05 12:46:25,908:INFO:Visual Rendered Successfully
2024-11-05 12:46:26,052:INFO:plot_model() successfully completed......................................
2024-11-05 12:46:55,084:INFO:Initializing plot_model()
2024-11-05 12:46:55,085:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, system=True)
2024-11-05 12:46:55,085:INFO:Checking exceptions
2024-11-05 12:46:55,141:INFO:Preloading libraries
2024-11-05 12:46:55,158:INFO:Copying training dataset
2024-11-05 12:46:55,158:INFO:Plot type: feature
2024-11-05 12:46:55,158:WARNING:No coef_ found. Trying feature_importances_
2024-11-05 12:46:55,532:INFO:Visual Rendered Successfully
2024-11-05 12:46:55,657:INFO:plot_model() successfully completed......................................
2024-11-05 12:48:29,339:INFO:Initializing predict_model()
2024-11-05 12:48:29,339:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E378778EE0>)
2024-11-05 12:48:29,339:INFO:Checking exceptions
2024-11-05 12:48:29,340:INFO:Preloading libraries
2024-11-05 12:48:29,343:INFO:Set up data.
2024-11-05 12:48:29,360:INFO:Set up index.
2024-11-05 12:49:30,384:INFO:Initializing save_model()
2024-11-05 12:49:30,385:INFO:save_model(model=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8034, verbose=0,
                     warm_start=False), model_name=model_et, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                                    transformer=PowerTransformer(copy=True,
                                                                 method='yeo-johnson',
                                                                 standardize=False))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-11-05 12:49:30,385:INFO:Adding model into prep_pipe
2024-11-05 12:49:30,462:INFO:model_et.pkl saved in current working directory
2024-11-05 12:49:30,503:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_featur...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=8034, verbose=0,
                                      warm_start=False))],
         verbose=False)
2024-11-05 12:49:30,504:INFO:save_model() successfully completed......................................
2024-11-05 12:50:22,014:INFO:Initializing load_model()
2024-11-05 12:50:22,014:INFO:load_model(model_name=model_et, platform=None, authentication=None, verbose=True)
2024-11-05 12:51:05,526:INFO:Initializing predict_model()
2024-11-05 12:51:05,526:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E3000A4A30>, estimator=Pipeline(memory=FastMemory(location=C:\Users\SHAHRIAR\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Protein1', 'Protein2',
                                             'Protein3', 'Protein4'],
                                    transformer=SimpleImputer(add_indicator=False,...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=8034, verbose=0,
                                      warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E378778AF0>)
2024-11-05 12:51:05,526:INFO:Checking exceptions
2024-11-05 12:51:05,526:INFO:Preloading libraries
2024-11-05 12:51:05,545:INFO:Set up data.
2024-11-05 12:51:05,560:INFO:Set up index.
